
001Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010e4  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  0800128c  0800128c  0001128c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001354  08001354  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001354  08001354  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001354  08001354  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001354  08001354  00011354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001358  08001358  00011358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800135c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00000078  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000dc  200000dc  00020064  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000cb6  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000421  00000000  00000000  00020d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  00021168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000190  00000000  00000000  00021330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b28  00000000  00000000  000214c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001683  00000000  00000000  00023fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000097b0  00000000  00000000  0002566b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002ee1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cc0  00000000  00000000  0002ee6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000064 	.word	0x20000064
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001274 	.word	0x08001274

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000068 	.word	0x20000068
 80001e4:	08001274 	.word	0x08001274

080001e8 <main>:
}TCB_t;

TCB_t application_tasks[MAX_TASKS];

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001ec:	f000 f8fe 	bl	80003ec <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x28>)
 80001f2:	f000 f836 	bl	8000262 <init_scheduler_stack>
	init_task_handlers();
 80001f6:	f000 f839 	bl	800026c <init_task_handlers>
	init_task_stacks();
 80001fa:	f000 f87b 	bl	80002f4 <init_task_stacks>
	init_systick_timer(TICK_HZ);
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f000 f8c1 	bl	8000388 <init_systick_timer>

	switch_SP_to_PSP();
 8000206:	f000 f913 	bl	8000430 <switch_SP_to_PSP>

	task1_handler();
 800020a:	f000 f803 	bl	8000214 <task1_handler>
    /* Loop forever */
	for(;;);
 800020e:	e7fe      	b.n	800020e <main+0x26>
 8000210:	2001f000 	.word	0x2001f000

08000214 <task1_handler>:
}

void task1_handler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("TASK1\n");
 8000218:	4803      	ldr	r0, [pc, #12]	; (8000228 <task1_handler+0x14>)
 800021a:	f000 fba1 	bl	8000960 <puts>
		block_task(1000);
 800021e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000222:	f000 f95f 	bl	80004e4 <block_task>
		printf("TASK1\n");
 8000226:	e7f7      	b.n	8000218 <task1_handler+0x4>
 8000228:	0800128c 	.word	0x0800128c

0800022c <task2_handler>:
	}
}

void task2_handler(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("TASK2\n");
 8000230:	4803      	ldr	r0, [pc, #12]	; (8000240 <task2_handler+0x14>)
 8000232:	f000 fb95 	bl	8000960 <puts>
		block_task(1000);
 8000236:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800023a:	f000 f953 	bl	80004e4 <block_task>
		printf("TASK2\n");
 800023e:	e7f7      	b.n	8000230 <task2_handler+0x4>
 8000240:	08001294 	.word	0x08001294

08000244 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("TASK3\n");
 8000248:	4803      	ldr	r0, [pc, #12]	; (8000258 <task3_handler+0x14>)
 800024a:	f000 fb89 	bl	8000960 <puts>
		block_task(1000);
 800024e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000252:	f000 f947 	bl	80004e4 <block_task>
		printf("TASK3\n");
 8000256:	e7f7      	b.n	8000248 <task3_handler+0x4>
 8000258:	0800129c 	.word	0x0800129c

0800025c <default_task>:
	}
}

void default_task(void)
{
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0
	//Put MCU in Sleep Mode
	while(1)
 8000260:	e7fe      	b.n	8000260 <default_task+0x4>

08000262 <init_scheduler_stack>:
		//printf("Default\n");
	}
}

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_stack_top)
{
 8000262:	4603      	mov	r3, r0
	//Load Value of scheduler stack top into MSP
	__asm volatile("MSR MSP,%0"::"r"(scheduler_stack_top):);
 8000264:	f383 8808 	msr	MSP, r3

	//Branch Back to Main
	__asm volatile("BX LR");
 8000268:	4770      	bx	lr
}
 800026a:	bf00      	nop

0800026c <init_task_handlers>:

void init_task_handlers(void)
{
 800026c:	b480      	push	{r7}
 800026e:	af00      	add	r7, sp, #0
	application_tasks[0].current_state = TASK_RUNNING;
 8000270:	4b16      	ldr	r3, [pc, #88]	; (80002cc <init_task_handlers+0x60>)
 8000272:	2200      	movs	r2, #0
 8000274:	721a      	strb	r2, [r3, #8]
	application_tasks[0].task_PSP = DEFAULT_TASK_STACK_START;
 8000276:	4b15      	ldr	r3, [pc, #84]	; (80002cc <init_task_handlers+0x60>)
 8000278:	4a15      	ldr	r2, [pc, #84]	; (80002d0 <init_task_handlers+0x64>)
 800027a:	601a      	str	r2, [r3, #0]
	application_tasks[0].task_handler = default_task;
 800027c:	4b13      	ldr	r3, [pc, #76]	; (80002cc <init_task_handlers+0x60>)
 800027e:	4a15      	ldr	r2, [pc, #84]	; (80002d4 <init_task_handlers+0x68>)
 8000280:	60da      	str	r2, [r3, #12]

	application_tasks[1].current_state = TASK_RUNNING;
 8000282:	4b12      	ldr	r3, [pc, #72]	; (80002cc <init_task_handlers+0x60>)
 8000284:	2200      	movs	r2, #0
 8000286:	761a      	strb	r2, [r3, #24]
	application_tasks[1].task_PSP = TASK1_STACK_START;
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <init_task_handlers+0x60>)
 800028a:	4a13      	ldr	r2, [pc, #76]	; (80002d8 <init_task_handlers+0x6c>)
 800028c:	611a      	str	r2, [r3, #16]
	application_tasks[1].task_handler = task1_handler;
 800028e:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <init_task_handlers+0x60>)
 8000290:	4a12      	ldr	r2, [pc, #72]	; (80002dc <init_task_handlers+0x70>)
 8000292:	61da      	str	r2, [r3, #28]

	application_tasks[2].current_state = TASK_RUNNING;
 8000294:	4b0d      	ldr	r3, [pc, #52]	; (80002cc <init_task_handlers+0x60>)
 8000296:	2200      	movs	r2, #0
 8000298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	application_tasks[2].task_PSP = TASK2_STACK_START;
 800029c:	4b0b      	ldr	r3, [pc, #44]	; (80002cc <init_task_handlers+0x60>)
 800029e:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <init_task_handlers+0x74>)
 80002a0:	621a      	str	r2, [r3, #32]
	application_tasks[2].task_handler = task2_handler;
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <init_task_handlers+0x60>)
 80002a4:	4a0f      	ldr	r2, [pc, #60]	; (80002e4 <init_task_handlers+0x78>)
 80002a6:	62da      	str	r2, [r3, #44]	; 0x2c

	application_tasks[3].current_state = TASK_RUNNING;
 80002a8:	4b08      	ldr	r3, [pc, #32]	; (80002cc <init_task_handlers+0x60>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	application_tasks[3].task_PSP = TASK3_STACK_START;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <init_task_handlers+0x60>)
 80002b2:	4a0d      	ldr	r2, [pc, #52]	; (80002e8 <init_task_handlers+0x7c>)
 80002b4:	631a      	str	r2, [r3, #48]	; 0x30
	application_tasks[3].task_handler = task3_handler;
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <init_task_handlers+0x60>)
 80002b8:	4a0c      	ldr	r2, [pc, #48]	; (80002ec <init_task_handlers+0x80>)
 80002ba:	63da      	str	r2, [r3, #60]	; 0x3c

	//Task 0 will be default/idle task. Since all tasks are in Running State now so default task is not the current task
	current_task = 1;
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <init_task_handlers+0x84>)
 80002be:	2201      	movs	r2, #1
 80002c0:	701a      	strb	r2, [r3, #0]
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	20000088 	.word	0x20000088
 80002d0:	2001f400 	.word	0x2001f400
 80002d4:	0800025d 	.word	0x0800025d
 80002d8:	20020000 	.word	0x20020000
 80002dc:	08000215 	.word	0x08000215
 80002e0:	2001fc00 	.word	0x2001fc00
 80002e4:	0800022d 	.word	0x0800022d
 80002e8:	2001f800 	.word	0x2001f800
 80002ec:	08000245 	.word	0x08000245
 80002f0:	20000080 	.word	0x20000080

080002f4 <init_task_stacks>:

void init_task_stacks(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i=0;i<MAX_TASKS;i++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	e037      	b.n	8000370 <init_task_stacks+0x7c>
	{
		pPSP = (uint32_t*)application_tasks[i].task_PSP;
 8000300:	4a20      	ldr	r2, [pc, #128]	; (8000384 <init_task_stacks+0x90>)
 8000302:	68bb      	ldr	r3, [r7, #8]
 8000304:	011b      	lsls	r3, r3, #4
 8000306:	4413      	add	r3, r2
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	60fb      	str	r3, [r7, #12]

		//Stack Implementation is of Full Descending Type so Decrement by 1 before Pushing New Data
		pPSP--;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	3b04      	subs	r3, #4
 8000310:	60fb      	str	r3, [r7, #12]
		//Put Dummy XPSR
		*pPSP = 0x01000000U;  //Set T Bit (24th Bit) as 1 for Thumb Instruction Set Rest Are Ignored in the PSR
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000318:	601a      	str	r2, [r3, #0]

		//Put PC
		pPSP--;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	3b04      	subs	r3, #4
 800031e:	60fb      	str	r3, [r7, #12]
		*pPSP = (uint32_t)application_tasks[i].task_handler;
 8000320:	4a18      	ldr	r2, [pc, #96]	; (8000384 <init_task_stacks+0x90>)
 8000322:	68bb      	ldr	r3, [r7, #8]
 8000324:	011b      	lsls	r3, r3, #4
 8000326:	4413      	add	r3, r2
 8000328:	330c      	adds	r3, #12
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	601a      	str	r2, [r3, #0]

		//Put LR
		pPSP--;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	3b04      	subs	r3, #4
 8000336:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;  //EXC RETURN to Thread Mode with PSP as SP
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f06f 0202 	mvn.w	r2, #2
 800033e:	601a      	str	r2, [r3, #0]

		//Put R0 to R13
		for(int j=0;j<13;j++)
 8000340:	2300      	movs	r3, #0
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	e008      	b.n	8000358 <init_task_stacks+0x64>
		{
			pPSP--;
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	3b04      	subs	r3, #4
 800034a:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
		for(int j=0;j<13;j++)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	3301      	adds	r3, #1
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	2b0c      	cmp	r3, #12
 800035c:	ddf3      	ble.n	8000346 <init_task_stacks+0x52>
		}
		application_tasks[i].task_PSP = (uint32_t)pPSP;
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	4908      	ldr	r1, [pc, #32]	; (8000384 <init_task_stacks+0x90>)
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	011b      	lsls	r3, r3, #4
 8000366:	440b      	add	r3, r1
 8000368:	601a      	str	r2, [r3, #0]
	for(int i=0;i<MAX_TASKS;i++)
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	3301      	adds	r3, #1
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	2b03      	cmp	r3, #3
 8000374:	ddc4      	ble.n	8000300 <init_task_stacks+0xc>
	}
}
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr
 8000382:	bf00      	nop
 8000384:	20000088 	.word	0x20000088

08000388 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz)
{
 8000388:	b480      	push	{r7}
 800038a:	b087      	sub	sp, #28
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;             //SYSTICK RELOAD VALUE REGISTER ADDRESS
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <init_systick_timer+0x58>)
 8000392:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;			 //SYSTICK CONTROL AND STATUS REGISTER ADDRESS
 8000394:	4b13      	ldr	r3, [pc, #76]	; (80003e4 <init_systick_timer+0x5c>)
 8000396:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIMER_CLK /tick_hz -1;
 8000398:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <init_systick_timer+0x60>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a0:	3b01      	subs	r3, #1
 80003a2:	60fb      	str	r3, [r7, #12]

	//Reset Any Preloaded Values but leave the last 8 reserved bits untouched
	*pSRVR &= ~(0x00FFFFFF);
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	601a      	str	r2, [r3, #0]

	//Load Count Value into SRVR
	*pSRVR |= count_value;
 80003b0:	697b      	ldr	r3, [r7, #20]
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	431a      	orrs	r2, r3
 80003b8:	697b      	ldr	r3, [r7, #20]
 80003ba:	601a      	str	r2, [r3, #0]

	//Enable Systick Exception at 1st Bit and Set Clock Source as Processor at 2nd Bit by setting them to 1
	*pSCSR |= (3 << 1);
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f043 0206 	orr.w	r2, r3, #6
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	601a      	str	r2, [r3, #0]

	//Enable Systick Counter by Setting 0th Bit of SCSR to 1
	*pSCSR |= (1 << 0);
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f043 0201 	orr.w	r2, r3, #1
 80003d0:	693b      	ldr	r3, [r7, #16]
 80003d2:	601a      	str	r2, [r3, #0]

}
 80003d4:	bf00      	nop
 80003d6:	371c      	adds	r7, #28
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	e000e014 	.word	0xe000e014
 80003e4:	e000e010 	.word	0xe000e010
 80003e8:	00f42400 	.word	0x00f42400

080003ec <enable_processor_faults>:

void enable_processor_faults(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <enable_processor_faults+0x20>)
 80003f4:	607b      	str	r3, [r7, #4]

	//Memory Management Fault at 16th Bit
	//Bus Fault at 17th Bit
	//Usage Fault at 18th Bit
	// 7 = 0b111
	*pSHCSR |= (7 << 16);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f443 22e0 	orr.w	r2, r3, #458752	; 0x70000
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	e000ed24 	.word	0xe000ed24

08000410 <get_PSP_value>:

uint32_t get_PSP_value()
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	return application_tasks[current_task].task_PSP;
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <get_PSP_value+0x18>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <get_PSP_value+0x1c>)
 800041a:	011b      	lsls	r3, r3, #4
 800041c:	4413      	add	r3, r2
 800041e:	681b      	ldr	r3, [r3, #0]
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	20000080 	.word	0x20000080
 800042c:	20000088 	.word	0x20000088

08000430 <switch_SP_to_PSP>:

__attribute__((naked)) void switch_SP_to_PSP(void)
{
	//Save Return Address to Main because we will jump to another function in next instruction and LR Value will be changed
	__asm volatile ("PUSH {LR}");
 8000430:	b500      	push	{lr}
	__asm volatile ("BL get_PSP_value"); //Return Value will be in Register R0
 8000432:	f7ff ffed 	bl	8000410 <get_PSP_value>
	//Set PSP value to Task Stack of Current Task
	__asm volatile ("MSR PSP,R0");
 8000436:	f380 8809 	msr	PSP, r0
	//Pop the Return Address to Main back into LR
	__asm volatile ("POP {LR}");
 800043a:	f85d eb04 	ldr.w	lr, [sp], #4

	//Set CONTROL Register 1st Bit as 1 to Set MSP as Current Stack Point
	__asm volatile ("MOV R0,#0x02");
 800043e:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 8000442:	f380 8814 	msr	CONTROL, r0

	//No Epilogue for Naked functions so Go Back to Main manually
	__asm volatile ("BX LR");
 8000446:	4770      	bx	lr
}
 8000448:	bf00      	nop
	...

0800044c <set_PSP_value>:

void set_PSP_value(uint32_t current_task_stack_top)
{
 800044c:	b480      	push	{r7}
 800044e:	b083      	sub	sp, #12
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	application_tasks[current_task].task_PSP = current_task_stack_top;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <set_PSP_value+0x20>)
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	4a05      	ldr	r2, [pc, #20]	; (8000470 <set_PSP_value+0x24>)
 800045a:	011b      	lsls	r3, r3, #4
 800045c:	4413      	add	r3, r2
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	20000080 	.word	0x20000080
 8000470:	20000088 	.word	0x20000088

08000474 <switch_to_next_Task>:

void switch_to_next_Task(void)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
	for(int i=1;i<MAX_TASKS;i++)
 800047a:	2301      	movs	r3, #1
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	e017      	b.n	80004b0 <switch_to_next_Task+0x3c>
	{
		current_task++;
 8000480:	4b16      	ldr	r3, [pc, #88]	; (80004dc <switch_to_next_Task+0x68>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	3301      	adds	r3, #1
 8000486:	b2da      	uxtb	r2, r3
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <switch_to_next_Task+0x68>)
 800048a:	701a      	strb	r2, [r3, #0]
		//Get Back to First Task in Round Robin if Last Task on Queue is Done
		current_task %= MAX_TASKS;
 800048c:	4b13      	ldr	r3, [pc, #76]	; (80004dc <switch_to_next_Task+0x68>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	f003 0303 	and.w	r3, r3, #3
 8000494:	b2da      	uxtb	r2, r3
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <switch_to_next_Task+0x68>)
 8000498:	701a      	strb	r2, [r3, #0]
		if(application_tasks[i].current_state == TASK_RUNNING) //better to get current state in separate variable
 800049a:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <switch_to_next_Task+0x6c>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	011b      	lsls	r3, r3, #4
 80004a0:	4413      	add	r3, r2
 80004a2:	3308      	adds	r3, #8
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d006      	beq.n	80004b8 <switch_to_next_Task+0x44>
	for(int i=1;i<MAX_TASKS;i++)
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	3301      	adds	r3, #1
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	dde4      	ble.n	8000480 <switch_to_next_Task+0xc>
 80004b6:	e000      	b.n	80004ba <switch_to_next_Task+0x46>
			break;
 80004b8:	bf00      	nop
	}
	//After going through all tasks, the current task is still blocked, then run default task
	if(application_tasks[current_task].current_state != TASK_RUNNING)
 80004ba:	4b08      	ldr	r3, [pc, #32]	; (80004dc <switch_to_next_Task+0x68>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <switch_to_next_Task+0x6c>)
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	4413      	add	r3, r2
 80004c4:	3308      	adds	r3, #8
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <switch_to_next_Task+0x5e>
		current_task = 0;
 80004cc:	4b03      	ldr	r3, [pc, #12]	; (80004dc <switch_to_next_Task+0x68>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	701a      	strb	r2, [r3, #0]
}
 80004d2:	bf00      	nop
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	20000080 	.word	0x20000080
 80004e0:	20000088 	.word	0x20000088

080004e4 <block_task>:

void block_task(uint32_t tick_count)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if(current_task != 0) //Default Task Should Not Be Blocked since its default
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <block_task+0x44>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d015      	beq.n	8000520 <block_task+0x3c>
	{
		application_tasks[current_task].block_count = g_tick_count + tick_count;
 80004f4:	4b0d      	ldr	r3, [pc, #52]	; (800052c <block_task+0x48>)
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <block_task+0x44>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	4618      	mov	r0, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	441a      	add	r2, r3
 8000502:	490b      	ldr	r1, [pc, #44]	; (8000530 <block_task+0x4c>)
 8000504:	0103      	lsls	r3, r0, #4
 8000506:	440b      	add	r3, r1
 8000508:	3304      	adds	r3, #4
 800050a:	601a      	str	r2, [r3, #0]
		application_tasks[current_task].current_state = TASK_BLOCKED;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <block_task+0x44>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	4a07      	ldr	r2, [pc, #28]	; (8000530 <block_task+0x4c>)
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	4413      	add	r3, r2
 8000516:	3308      	adds	r3, #8
 8000518:	22ff      	movs	r2, #255	; 0xff
 800051a:	701a      	strb	r2, [r3, #0]
		trigger_PendSV();
 800051c:	f000 f848 	bl	80005b0 <trigger_PendSV>
	}
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	20000080 	.word	0x20000080
 800052c:	20000084 	.word	0x20000084
 8000530:	20000088 	.word	0x20000088

08000534 <unblock_tasks>:

void unblock_tasks(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
	for(int i=1;i<MAX_TASKS;i++)
 800053a:	2301      	movs	r3, #1
 800053c:	607b      	str	r3, [r7, #4]
 800053e:	e01b      	b.n	8000578 <unblock_tasks+0x44>
	{
		if(application_tasks[i].current_state == TASK_BLOCKED && application_tasks[i].block_count == g_tick_count)
 8000540:	4a12      	ldr	r2, [pc, #72]	; (800058c <unblock_tasks+0x58>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	011b      	lsls	r3, r3, #4
 8000546:	4413      	add	r3, r2
 8000548:	3308      	adds	r3, #8
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2bff      	cmp	r3, #255	; 0xff
 800054e:	d110      	bne.n	8000572 <unblock_tasks+0x3e>
 8000550:	4a0e      	ldr	r2, [pc, #56]	; (800058c <unblock_tasks+0x58>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	011b      	lsls	r3, r3, #4
 8000556:	4413      	add	r3, r2
 8000558:	3304      	adds	r3, #4
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <unblock_tasks+0x5c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	429a      	cmp	r2, r3
 8000562:	d106      	bne.n	8000572 <unblock_tasks+0x3e>
		{
			application_tasks[i].current_state = TASK_RUNNING;
 8000564:	4a09      	ldr	r2, [pc, #36]	; (800058c <unblock_tasks+0x58>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	4413      	add	r3, r2
 800056c:	3308      	adds	r3, #8
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<MAX_TASKS;i++)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	3301      	adds	r3, #1
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2b03      	cmp	r3, #3
 800057c:	dde0      	ble.n	8000540 <unblock_tasks+0xc>
		}
	}
}
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000088 	.word	0x20000088
 8000590:	20000084 	.word	0x20000084

08000594 <update_global_tick_count>:

void update_global_tick_count(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	g_tick_count++;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <update_global_tick_count+0x18>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	4a03      	ldr	r2, [pc, #12]	; (80005ac <update_global_tick_count+0x18>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop
 80005ac:	20000084 	.word	0x20000084

080005b0 <trigger_PendSV>:

void trigger_PendSV(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <trigger_PendSV+0x20>)
 80005b8:	607b      	str	r3, [r7, #4]
	*pICSR |= (1 << 28);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	601a      	str	r2, [r3, #0]
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bc80      	pop	{r7}
 80005ce:	4770      	bx	lr
 80005d0:	e000ed04 	.word	0xe000ed04

080005d4 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	printf("Hard Fault Occurred\n");
 80005d8:	4801      	ldr	r0, [pc, #4]	; (80005e0 <HardFault_Handler+0xc>)
 80005da:	f000 f9c1 	bl	8000960 <puts>
	while(1);
 80005de:	e7fe      	b.n	80005de <HardFault_Handler+0xa>
 80005e0:	080012a4 	.word	0x080012a4

080005e4 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	printf("Memory Management Fault Occurred\n");
 80005e8:	4801      	ldr	r0, [pc, #4]	; (80005f0 <MemManage_Handler+0xc>)
 80005ea:	f000 f9b9 	bl	8000960 <puts>
	while(1);
 80005ee:	e7fe      	b.n	80005ee <MemManage_Handler+0xa>
 80005f0:	080012b8 	.word	0x080012b8

080005f4 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	printf("Bus Fault Occurred\n");
 80005f8:	4801      	ldr	r0, [pc, #4]	; (8000600 <BusFault_Handler+0xc>)
 80005fa:	f000 f9b1 	bl	8000960 <puts>
	while(1);
 80005fe:	e7fe      	b.n	80005fe <BusFault_Handler+0xa>
 8000600:	080012dc 	.word	0x080012dc

08000604 <PendSV_Handler>:
}

__attribute__((naked)) void PendSV_Handler(void)
{
	//Get PSP of Current Task
	__asm volatile("MRS R0,PSP");
 8000604:	f3ef 8009 	mrs	r0, PSP
	//R0-R3,R12,LR (Stack Frame 1)/Caller Saved Registers will be Automatically Saved at Function Call Time
	//Store Values of R4-R11 (SF2)/Callee Saved Registers as per Procedure Call Standard of AAPCS
	//We can not use PUSH because it will change the SP (PSP since we're in Privileged Mode)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000608:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//Push LR i.e Return Address to Main in Main Stack
	//This is because we are going to jump to other functions and its value will be changed
	__asm volatile("PUSH {LR}");
 800060c:	b500      	push	{lr}

	//Set Updated PSP Value (after pushing SF2 to Global PSP of Current Task
	//According to AAPCS the called function will take its input from R0
	__asm volatile("BL set_PSP_value");
 800060e:	f7ff ff1d 	bl	800044c <set_PSP_value>

	//Context of Current Task is Saved, Now Load Context of Next Task
	__asm volatile("BL switch_to_next_Task");
 8000612:	f7ff ff2f 	bl	8000474 <switch_to_next_Task>
	__asm volatile("BL get_PSP_value");  //Return Value i.e PSP of Next Task is in R0
 8000616:	f7ff fefb 	bl	8000410 <get_PSP_value>

	//Load SF2/Callee Saved Registers/R4-R11 Back into the SFRs
	__asm volatile("LDMIA R0!,{R4-R11}");
 800061a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Set PSP to Top of Next Tasks Stack Top
	__asm volatile("MSR PSP,R0");
 800061e:	f380 8809 	msr	PSP, r0

	//Pop LR i.e Return Address to Main back from Main Stack
	__asm volatile("POP {LR}");
 8000622:	f85d eb04 	ldr.w	lr, [sp], #4

	//This is a Naked Function so there is no Epilogue Sequence and we have to manually return to main
	__asm volatile("BX LR");
 8000626:	4770      	bx	lr
}
 8000628:	bf00      	nop

0800062a <SysTick_Handler>:

void SysTick_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0
	update_global_tick_count();
 800062e:	f7ff ffb1 	bl	8000594 <update_global_tick_count>
	unblock_tasks();
 8000632:	f7ff ff7f 	bl	8000534 <unblock_tasks>
	trigger_PendSV();
 8000636:	f7ff ffbb 	bl	80005b0 <trigger_PendSV>
}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <ITM_SendChar+0x44>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <ITM_SendChar+0x44>)
 8000650:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000654:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <ITM_SendChar+0x48>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <ITM_SendChar+0x48>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000662:	bf00      	nop
 8000664:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f8      	beq.n	8000664 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000672:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000676:	79fb      	ldrb	r3, [r7, #7]
 8000678:	6013      	str	r3, [r2, #0]
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr
 8000684:	e000edfc 	.word	0xe000edfc
 8000688:	e0000e00 	.word	0xe0000e00

0800068c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	e00a      	b.n	80006b4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800069e:	f3af 8000 	nop.w
 80006a2:	4601      	mov	r1, r0
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	b2ca      	uxtb	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	3301      	adds	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697a      	ldr	r2, [r7, #20]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	429a      	cmp	r2, r3
 80006ba:	dbf0      	blt.n	800069e <_read+0x12>
  }

  return len;
 80006bc:	687b      	ldr	r3, [r7, #4]
}
 80006be:	4618      	mov	r0, r3
 80006c0:	3718      	adds	r7, #24
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b086      	sub	sp, #24
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	60f8      	str	r0, [r7, #12]
 80006ce:	60b9      	str	r1, [r7, #8]
 80006d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	e009      	b.n	80006ec <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	1c5a      	adds	r2, r3, #1
 80006dc:	60ba      	str	r2, [r7, #8]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffad 	bl	8000640 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	3301      	adds	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
 80006ec:	697a      	ldr	r2, [r7, #20]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	dbf1      	blt.n	80006d8 <_write+0x12>
  }
  return len;
 80006f4:	687b      	ldr	r3, [r7, #4]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3718      	adds	r7, #24
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}

080006fe <_close>:

int _close(int file)
{
 80006fe:	b480      	push	{r7}
 8000700:	b083      	sub	sp, #12
 8000702:	af00      	add	r7, sp, #0
 8000704:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
}
 800070a:	4618      	mov	r0, r3
 800070c:	370c      	adds	r7, #12
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000724:	605a      	str	r2, [r3, #4]
  return 0;
 8000726:	2300      	movs	r3, #0
}
 8000728:	4618      	mov	r0, r3
 800072a:	370c      	adds	r7, #12
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <_isatty>:

int _isatty(int file)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800073a:	2301      	movs	r3, #1
}
 800073c:	4618      	mov	r0, r3
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000746:	b480      	push	{r7}
 8000748:	b085      	sub	sp, #20
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000752:	2300      	movs	r3, #0
}
 8000754:	4618      	mov	r0, r3
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	bc80      	pop	{r7}
 800075c:	4770      	bx	lr
	...

08000760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000768:	4a14      	ldr	r2, [pc, #80]	; (80007bc <_sbrk+0x5c>)
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <_sbrk+0x60>)
 800076c:	1ad3      	subs	r3, r2, r3
 800076e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000774:	4b13      	ldr	r3, [pc, #76]	; (80007c4 <_sbrk+0x64>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d102      	bne.n	8000782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800077c:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <_sbrk+0x64>)
 800077e:	4a12      	ldr	r2, [pc, #72]	; (80007c8 <_sbrk+0x68>)
 8000780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000782:	4b10      	ldr	r3, [pc, #64]	; (80007c4 <_sbrk+0x64>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	4413      	add	r3, r2
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	429a      	cmp	r2, r3
 800078e:	d207      	bcs.n	80007a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000790:	f000 f846 	bl	8000820 <__errno>
 8000794:	4603      	mov	r3, r0
 8000796:	220c      	movs	r2, #12
 8000798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800079a:	f04f 33ff 	mov.w	r3, #4294967295
 800079e:	e009      	b.n	80007b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007a0:	4b08      	ldr	r3, [pc, #32]	; (80007c4 <_sbrk+0x64>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007a6:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <_sbrk+0x64>)
 80007a8:	681a      	ldr	r2, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	4413      	add	r3, r2
 80007ae:	4a05      	ldr	r2, [pc, #20]	; (80007c4 <_sbrk+0x64>)
 80007b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007b2:	68fb      	ldr	r3, [r7, #12]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3718      	adds	r7, #24
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20020000 	.word	0x20020000
 80007c0:	00000400 	.word	0x00000400
 80007c4:	200000c8 	.word	0x200000c8
 80007c8:	200000e0 	.word	0x200000e0

080007cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490d      	ldr	r1, [pc, #52]	; (800080c <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0d      	ldr	r2, [pc, #52]	; (8000810 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0a      	ldr	r2, [pc, #40]	; (8000814 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0a      	ldr	r4, [pc, #40]	; (8000818 <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007fa:	f000 f817 	bl	800082c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fe:	f7ff fcf3 	bl	80001e8 <main>

08000802 <LoopForever>:

LoopForever:
  b LoopForever
 8000802:	e7fe      	b.n	8000802 <LoopForever>
  ldr   r0, =_estack
 8000804:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800080c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000810:	0800135c 	.word	0x0800135c
  ldr r2, =_sbss
 8000814:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000818:	200000dc 	.word	0x200000dc

0800081c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800081c:	e7fe      	b.n	800081c <ADC_IRQHandler>
	...

08000820 <__errno>:
 8000820:	4b01      	ldr	r3, [pc, #4]	; (8000828 <__errno+0x8>)
 8000822:	6818      	ldr	r0, [r3, #0]
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000000 	.word	0x20000000

0800082c <__libc_init_array>:
 800082c:	b570      	push	{r4, r5, r6, lr}
 800082e:	4d0d      	ldr	r5, [pc, #52]	; (8000864 <__libc_init_array+0x38>)
 8000830:	4c0d      	ldr	r4, [pc, #52]	; (8000868 <__libc_init_array+0x3c>)
 8000832:	1b64      	subs	r4, r4, r5
 8000834:	10a4      	asrs	r4, r4, #2
 8000836:	2600      	movs	r6, #0
 8000838:	42a6      	cmp	r6, r4
 800083a:	d109      	bne.n	8000850 <__libc_init_array+0x24>
 800083c:	4d0b      	ldr	r5, [pc, #44]	; (800086c <__libc_init_array+0x40>)
 800083e:	4c0c      	ldr	r4, [pc, #48]	; (8000870 <__libc_init_array+0x44>)
 8000840:	f000 fd18 	bl	8001274 <_init>
 8000844:	1b64      	subs	r4, r4, r5
 8000846:	10a4      	asrs	r4, r4, #2
 8000848:	2600      	movs	r6, #0
 800084a:	42a6      	cmp	r6, r4
 800084c:	d105      	bne.n	800085a <__libc_init_array+0x2e>
 800084e:	bd70      	pop	{r4, r5, r6, pc}
 8000850:	f855 3b04 	ldr.w	r3, [r5], #4
 8000854:	4798      	blx	r3
 8000856:	3601      	adds	r6, #1
 8000858:	e7ee      	b.n	8000838 <__libc_init_array+0xc>
 800085a:	f855 3b04 	ldr.w	r3, [r5], #4
 800085e:	4798      	blx	r3
 8000860:	3601      	adds	r6, #1
 8000862:	e7f2      	b.n	800084a <__libc_init_array+0x1e>
 8000864:	08001354 	.word	0x08001354
 8000868:	08001354 	.word	0x08001354
 800086c:	08001354 	.word	0x08001354
 8000870:	08001358 	.word	0x08001358

08000874 <memset>:
 8000874:	4402      	add	r2, r0
 8000876:	4603      	mov	r3, r0
 8000878:	4293      	cmp	r3, r2
 800087a:	d100      	bne.n	800087e <memset+0xa>
 800087c:	4770      	bx	lr
 800087e:	f803 1b01 	strb.w	r1, [r3], #1
 8000882:	e7f9      	b.n	8000878 <memset+0x4>

08000884 <_puts_r>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	460e      	mov	r6, r1
 8000888:	4605      	mov	r5, r0
 800088a:	b118      	cbz	r0, 8000894 <_puts_r+0x10>
 800088c:	6983      	ldr	r3, [r0, #24]
 800088e:	b90b      	cbnz	r3, 8000894 <_puts_r+0x10>
 8000890:	f000 fa44 	bl	8000d1c <__sinit>
 8000894:	69ab      	ldr	r3, [r5, #24]
 8000896:	68ac      	ldr	r4, [r5, #8]
 8000898:	b913      	cbnz	r3, 80008a0 <_puts_r+0x1c>
 800089a:	4628      	mov	r0, r5
 800089c:	f000 fa3e 	bl	8000d1c <__sinit>
 80008a0:	4b2c      	ldr	r3, [pc, #176]	; (8000954 <_puts_r+0xd0>)
 80008a2:	429c      	cmp	r4, r3
 80008a4:	d120      	bne.n	80008e8 <_puts_r+0x64>
 80008a6:	686c      	ldr	r4, [r5, #4]
 80008a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80008aa:	07db      	lsls	r3, r3, #31
 80008ac:	d405      	bmi.n	80008ba <_puts_r+0x36>
 80008ae:	89a3      	ldrh	r3, [r4, #12]
 80008b0:	0598      	lsls	r0, r3, #22
 80008b2:	d402      	bmi.n	80008ba <_puts_r+0x36>
 80008b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80008b6:	f000 facf 	bl	8000e58 <__retarget_lock_acquire_recursive>
 80008ba:	89a3      	ldrh	r3, [r4, #12]
 80008bc:	0719      	lsls	r1, r3, #28
 80008be:	d51d      	bpl.n	80008fc <_puts_r+0x78>
 80008c0:	6923      	ldr	r3, [r4, #16]
 80008c2:	b1db      	cbz	r3, 80008fc <_puts_r+0x78>
 80008c4:	3e01      	subs	r6, #1
 80008c6:	68a3      	ldr	r3, [r4, #8]
 80008c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008cc:	3b01      	subs	r3, #1
 80008ce:	60a3      	str	r3, [r4, #8]
 80008d0:	bb39      	cbnz	r1, 8000922 <_puts_r+0x9e>
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	da38      	bge.n	8000948 <_puts_r+0xc4>
 80008d6:	4622      	mov	r2, r4
 80008d8:	210a      	movs	r1, #10
 80008da:	4628      	mov	r0, r5
 80008dc:	f000 f848 	bl	8000970 <__swbuf_r>
 80008e0:	3001      	adds	r0, #1
 80008e2:	d011      	beq.n	8000908 <_puts_r+0x84>
 80008e4:	250a      	movs	r5, #10
 80008e6:	e011      	b.n	800090c <_puts_r+0x88>
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <_puts_r+0xd4>)
 80008ea:	429c      	cmp	r4, r3
 80008ec:	d101      	bne.n	80008f2 <_puts_r+0x6e>
 80008ee:	68ac      	ldr	r4, [r5, #8]
 80008f0:	e7da      	b.n	80008a8 <_puts_r+0x24>
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <_puts_r+0xd8>)
 80008f4:	429c      	cmp	r4, r3
 80008f6:	bf08      	it	eq
 80008f8:	68ec      	ldreq	r4, [r5, #12]
 80008fa:	e7d5      	b.n	80008a8 <_puts_r+0x24>
 80008fc:	4621      	mov	r1, r4
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 f888 	bl	8000a14 <__swsetup_r>
 8000904:	2800      	cmp	r0, #0
 8000906:	d0dd      	beq.n	80008c4 <_puts_r+0x40>
 8000908:	f04f 35ff 	mov.w	r5, #4294967295
 800090c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800090e:	07da      	lsls	r2, r3, #31
 8000910:	d405      	bmi.n	800091e <_puts_r+0x9a>
 8000912:	89a3      	ldrh	r3, [r4, #12]
 8000914:	059b      	lsls	r3, r3, #22
 8000916:	d402      	bmi.n	800091e <_puts_r+0x9a>
 8000918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800091a:	f000 fa9e 	bl	8000e5a <__retarget_lock_release_recursive>
 800091e:	4628      	mov	r0, r5
 8000920:	bd70      	pop	{r4, r5, r6, pc}
 8000922:	2b00      	cmp	r3, #0
 8000924:	da04      	bge.n	8000930 <_puts_r+0xac>
 8000926:	69a2      	ldr	r2, [r4, #24]
 8000928:	429a      	cmp	r2, r3
 800092a:	dc06      	bgt.n	800093a <_puts_r+0xb6>
 800092c:	290a      	cmp	r1, #10
 800092e:	d004      	beq.n	800093a <_puts_r+0xb6>
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	6022      	str	r2, [r4, #0]
 8000936:	7019      	strb	r1, [r3, #0]
 8000938:	e7c5      	b.n	80008c6 <_puts_r+0x42>
 800093a:	4622      	mov	r2, r4
 800093c:	4628      	mov	r0, r5
 800093e:	f000 f817 	bl	8000970 <__swbuf_r>
 8000942:	3001      	adds	r0, #1
 8000944:	d1bf      	bne.n	80008c6 <_puts_r+0x42>
 8000946:	e7df      	b.n	8000908 <_puts_r+0x84>
 8000948:	6823      	ldr	r3, [r4, #0]
 800094a:	250a      	movs	r5, #10
 800094c:	1c5a      	adds	r2, r3, #1
 800094e:	6022      	str	r2, [r4, #0]
 8000950:	701d      	strb	r5, [r3, #0]
 8000952:	e7db      	b.n	800090c <_puts_r+0x88>
 8000954:	08001314 	.word	0x08001314
 8000958:	08001334 	.word	0x08001334
 800095c:	080012f4 	.word	0x080012f4

08000960 <puts>:
 8000960:	4b02      	ldr	r3, [pc, #8]	; (800096c <puts+0xc>)
 8000962:	4601      	mov	r1, r0
 8000964:	6818      	ldr	r0, [r3, #0]
 8000966:	f7ff bf8d 	b.w	8000884 <_puts_r>
 800096a:	bf00      	nop
 800096c:	20000000 	.word	0x20000000

08000970 <__swbuf_r>:
 8000970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000972:	460e      	mov	r6, r1
 8000974:	4614      	mov	r4, r2
 8000976:	4605      	mov	r5, r0
 8000978:	b118      	cbz	r0, 8000982 <__swbuf_r+0x12>
 800097a:	6983      	ldr	r3, [r0, #24]
 800097c:	b90b      	cbnz	r3, 8000982 <__swbuf_r+0x12>
 800097e:	f000 f9cd 	bl	8000d1c <__sinit>
 8000982:	4b21      	ldr	r3, [pc, #132]	; (8000a08 <__swbuf_r+0x98>)
 8000984:	429c      	cmp	r4, r3
 8000986:	d12b      	bne.n	80009e0 <__swbuf_r+0x70>
 8000988:	686c      	ldr	r4, [r5, #4]
 800098a:	69a3      	ldr	r3, [r4, #24]
 800098c:	60a3      	str	r3, [r4, #8]
 800098e:	89a3      	ldrh	r3, [r4, #12]
 8000990:	071a      	lsls	r2, r3, #28
 8000992:	d52f      	bpl.n	80009f4 <__swbuf_r+0x84>
 8000994:	6923      	ldr	r3, [r4, #16]
 8000996:	b36b      	cbz	r3, 80009f4 <__swbuf_r+0x84>
 8000998:	6923      	ldr	r3, [r4, #16]
 800099a:	6820      	ldr	r0, [r4, #0]
 800099c:	1ac0      	subs	r0, r0, r3
 800099e:	6963      	ldr	r3, [r4, #20]
 80009a0:	b2f6      	uxtb	r6, r6
 80009a2:	4283      	cmp	r3, r0
 80009a4:	4637      	mov	r7, r6
 80009a6:	dc04      	bgt.n	80009b2 <__swbuf_r+0x42>
 80009a8:	4621      	mov	r1, r4
 80009aa:	4628      	mov	r0, r5
 80009ac:	f000 f922 	bl	8000bf4 <_fflush_r>
 80009b0:	bb30      	cbnz	r0, 8000a00 <__swbuf_r+0x90>
 80009b2:	68a3      	ldr	r3, [r4, #8]
 80009b4:	3b01      	subs	r3, #1
 80009b6:	60a3      	str	r3, [r4, #8]
 80009b8:	6823      	ldr	r3, [r4, #0]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	6022      	str	r2, [r4, #0]
 80009be:	701e      	strb	r6, [r3, #0]
 80009c0:	6963      	ldr	r3, [r4, #20]
 80009c2:	3001      	adds	r0, #1
 80009c4:	4283      	cmp	r3, r0
 80009c6:	d004      	beq.n	80009d2 <__swbuf_r+0x62>
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	07db      	lsls	r3, r3, #31
 80009cc:	d506      	bpl.n	80009dc <__swbuf_r+0x6c>
 80009ce:	2e0a      	cmp	r6, #10
 80009d0:	d104      	bne.n	80009dc <__swbuf_r+0x6c>
 80009d2:	4621      	mov	r1, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 f90d 	bl	8000bf4 <_fflush_r>
 80009da:	b988      	cbnz	r0, 8000a00 <__swbuf_r+0x90>
 80009dc:	4638      	mov	r0, r7
 80009de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e0:	4b0a      	ldr	r3, [pc, #40]	; (8000a0c <__swbuf_r+0x9c>)
 80009e2:	429c      	cmp	r4, r3
 80009e4:	d101      	bne.n	80009ea <__swbuf_r+0x7a>
 80009e6:	68ac      	ldr	r4, [r5, #8]
 80009e8:	e7cf      	b.n	800098a <__swbuf_r+0x1a>
 80009ea:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <__swbuf_r+0xa0>)
 80009ec:	429c      	cmp	r4, r3
 80009ee:	bf08      	it	eq
 80009f0:	68ec      	ldreq	r4, [r5, #12]
 80009f2:	e7ca      	b.n	800098a <__swbuf_r+0x1a>
 80009f4:	4621      	mov	r1, r4
 80009f6:	4628      	mov	r0, r5
 80009f8:	f000 f80c 	bl	8000a14 <__swsetup_r>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d0cb      	beq.n	8000998 <__swbuf_r+0x28>
 8000a00:	f04f 37ff 	mov.w	r7, #4294967295
 8000a04:	e7ea      	b.n	80009dc <__swbuf_r+0x6c>
 8000a06:	bf00      	nop
 8000a08:	08001314 	.word	0x08001314
 8000a0c:	08001334 	.word	0x08001334
 8000a10:	080012f4 	.word	0x080012f4

08000a14 <__swsetup_r>:
 8000a14:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <__swsetup_r+0xcc>)
 8000a16:	b570      	push	{r4, r5, r6, lr}
 8000a18:	681d      	ldr	r5, [r3, #0]
 8000a1a:	4606      	mov	r6, r0
 8000a1c:	460c      	mov	r4, r1
 8000a1e:	b125      	cbz	r5, 8000a2a <__swsetup_r+0x16>
 8000a20:	69ab      	ldr	r3, [r5, #24]
 8000a22:	b913      	cbnz	r3, 8000a2a <__swsetup_r+0x16>
 8000a24:	4628      	mov	r0, r5
 8000a26:	f000 f979 	bl	8000d1c <__sinit>
 8000a2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ae4 <__swsetup_r+0xd0>)
 8000a2c:	429c      	cmp	r4, r3
 8000a2e:	d10f      	bne.n	8000a50 <__swsetup_r+0x3c>
 8000a30:	686c      	ldr	r4, [r5, #4]
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000a38:	0719      	lsls	r1, r3, #28
 8000a3a:	d42c      	bmi.n	8000a96 <__swsetup_r+0x82>
 8000a3c:	06dd      	lsls	r5, r3, #27
 8000a3e:	d411      	bmi.n	8000a64 <__swsetup_r+0x50>
 8000a40:	2309      	movs	r3, #9
 8000a42:	6033      	str	r3, [r6, #0]
 8000a44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000a48:	81a3      	strh	r3, [r4, #12]
 8000a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000a4e:	e03e      	b.n	8000ace <__swsetup_r+0xba>
 8000a50:	4b25      	ldr	r3, [pc, #148]	; (8000ae8 <__swsetup_r+0xd4>)
 8000a52:	429c      	cmp	r4, r3
 8000a54:	d101      	bne.n	8000a5a <__swsetup_r+0x46>
 8000a56:	68ac      	ldr	r4, [r5, #8]
 8000a58:	e7eb      	b.n	8000a32 <__swsetup_r+0x1e>
 8000a5a:	4b24      	ldr	r3, [pc, #144]	; (8000aec <__swsetup_r+0xd8>)
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	bf08      	it	eq
 8000a60:	68ec      	ldreq	r4, [r5, #12]
 8000a62:	e7e6      	b.n	8000a32 <__swsetup_r+0x1e>
 8000a64:	0758      	lsls	r0, r3, #29
 8000a66:	d512      	bpl.n	8000a8e <__swsetup_r+0x7a>
 8000a68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a6a:	b141      	cbz	r1, 8000a7e <__swsetup_r+0x6a>
 8000a6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a70:	4299      	cmp	r1, r3
 8000a72:	d002      	beq.n	8000a7a <__swsetup_r+0x66>
 8000a74:	4630      	mov	r0, r6
 8000a76:	f000 fa57 	bl	8000f28 <_free_r>
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	6363      	str	r3, [r4, #52]	; 0x34
 8000a7e:	89a3      	ldrh	r3, [r4, #12]
 8000a80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a84:	81a3      	strh	r3, [r4, #12]
 8000a86:	2300      	movs	r3, #0
 8000a88:	6063      	str	r3, [r4, #4]
 8000a8a:	6923      	ldr	r3, [r4, #16]
 8000a8c:	6023      	str	r3, [r4, #0]
 8000a8e:	89a3      	ldrh	r3, [r4, #12]
 8000a90:	f043 0308 	orr.w	r3, r3, #8
 8000a94:	81a3      	strh	r3, [r4, #12]
 8000a96:	6923      	ldr	r3, [r4, #16]
 8000a98:	b94b      	cbnz	r3, 8000aae <__swsetup_r+0x9a>
 8000a9a:	89a3      	ldrh	r3, [r4, #12]
 8000a9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000aa4:	d003      	beq.n	8000aae <__swsetup_r+0x9a>
 8000aa6:	4621      	mov	r1, r4
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f000 f9fd 	bl	8000ea8 <__smakebuf_r>
 8000aae:	89a0      	ldrh	r0, [r4, #12]
 8000ab0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000ab4:	f010 0301 	ands.w	r3, r0, #1
 8000ab8:	d00a      	beq.n	8000ad0 <__swsetup_r+0xbc>
 8000aba:	2300      	movs	r3, #0
 8000abc:	60a3      	str	r3, [r4, #8]
 8000abe:	6963      	ldr	r3, [r4, #20]
 8000ac0:	425b      	negs	r3, r3
 8000ac2:	61a3      	str	r3, [r4, #24]
 8000ac4:	6923      	ldr	r3, [r4, #16]
 8000ac6:	b943      	cbnz	r3, 8000ada <__swsetup_r+0xc6>
 8000ac8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000acc:	d1ba      	bne.n	8000a44 <__swsetup_r+0x30>
 8000ace:	bd70      	pop	{r4, r5, r6, pc}
 8000ad0:	0781      	lsls	r1, r0, #30
 8000ad2:	bf58      	it	pl
 8000ad4:	6963      	ldrpl	r3, [r4, #20]
 8000ad6:	60a3      	str	r3, [r4, #8]
 8000ad8:	e7f4      	b.n	8000ac4 <__swsetup_r+0xb0>
 8000ada:	2000      	movs	r0, #0
 8000adc:	e7f7      	b.n	8000ace <__swsetup_r+0xba>
 8000ade:	bf00      	nop
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	08001314 	.word	0x08001314
 8000ae8:	08001334 	.word	0x08001334
 8000aec:	080012f4 	.word	0x080012f4

08000af0 <__sflush_r>:
 8000af0:	898a      	ldrh	r2, [r1, #12]
 8000af2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af4:	4605      	mov	r5, r0
 8000af6:	0710      	lsls	r0, r2, #28
 8000af8:	460c      	mov	r4, r1
 8000afa:	d457      	bmi.n	8000bac <__sflush_r+0xbc>
 8000afc:	684b      	ldr	r3, [r1, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	dc04      	bgt.n	8000b0c <__sflush_r+0x1c>
 8000b02:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dc01      	bgt.n	8000b0c <__sflush_r+0x1c>
 8000b08:	2000      	movs	r0, #0
 8000b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0fa      	beq.n	8000b08 <__sflush_r+0x18>
 8000b12:	2300      	movs	r3, #0
 8000b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000b18:	682f      	ldr	r7, [r5, #0]
 8000b1a:	602b      	str	r3, [r5, #0]
 8000b1c:	d032      	beq.n	8000b84 <__sflush_r+0x94>
 8000b1e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000b20:	89a3      	ldrh	r3, [r4, #12]
 8000b22:	075a      	lsls	r2, r3, #29
 8000b24:	d505      	bpl.n	8000b32 <__sflush_r+0x42>
 8000b26:	6863      	ldr	r3, [r4, #4]
 8000b28:	1ac0      	subs	r0, r0, r3
 8000b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b2c:	b10b      	cbz	r3, 8000b32 <__sflush_r+0x42>
 8000b2e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000b30:	1ac0      	subs	r0, r0, r3
 8000b32:	2300      	movs	r3, #0
 8000b34:	4602      	mov	r2, r0
 8000b36:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000b38:	6a21      	ldr	r1, [r4, #32]
 8000b3a:	4628      	mov	r0, r5
 8000b3c:	47b0      	blx	r6
 8000b3e:	1c43      	adds	r3, r0, #1
 8000b40:	89a3      	ldrh	r3, [r4, #12]
 8000b42:	d106      	bne.n	8000b52 <__sflush_r+0x62>
 8000b44:	6829      	ldr	r1, [r5, #0]
 8000b46:	291d      	cmp	r1, #29
 8000b48:	d82c      	bhi.n	8000ba4 <__sflush_r+0xb4>
 8000b4a:	4a29      	ldr	r2, [pc, #164]	; (8000bf0 <__sflush_r+0x100>)
 8000b4c:	40ca      	lsrs	r2, r1
 8000b4e:	07d6      	lsls	r6, r2, #31
 8000b50:	d528      	bpl.n	8000ba4 <__sflush_r+0xb4>
 8000b52:	2200      	movs	r2, #0
 8000b54:	6062      	str	r2, [r4, #4]
 8000b56:	04d9      	lsls	r1, r3, #19
 8000b58:	6922      	ldr	r2, [r4, #16]
 8000b5a:	6022      	str	r2, [r4, #0]
 8000b5c:	d504      	bpl.n	8000b68 <__sflush_r+0x78>
 8000b5e:	1c42      	adds	r2, r0, #1
 8000b60:	d101      	bne.n	8000b66 <__sflush_r+0x76>
 8000b62:	682b      	ldr	r3, [r5, #0]
 8000b64:	b903      	cbnz	r3, 8000b68 <__sflush_r+0x78>
 8000b66:	6560      	str	r0, [r4, #84]	; 0x54
 8000b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b6a:	602f      	str	r7, [r5, #0]
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d0cb      	beq.n	8000b08 <__sflush_r+0x18>
 8000b70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d002      	beq.n	8000b7e <__sflush_r+0x8e>
 8000b78:	4628      	mov	r0, r5
 8000b7a:	f000 f9d5 	bl	8000f28 <_free_r>
 8000b7e:	2000      	movs	r0, #0
 8000b80:	6360      	str	r0, [r4, #52]	; 0x34
 8000b82:	e7c2      	b.n	8000b0a <__sflush_r+0x1a>
 8000b84:	6a21      	ldr	r1, [r4, #32]
 8000b86:	2301      	movs	r3, #1
 8000b88:	4628      	mov	r0, r5
 8000b8a:	47b0      	blx	r6
 8000b8c:	1c41      	adds	r1, r0, #1
 8000b8e:	d1c7      	bne.n	8000b20 <__sflush_r+0x30>
 8000b90:	682b      	ldr	r3, [r5, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0c4      	beq.n	8000b20 <__sflush_r+0x30>
 8000b96:	2b1d      	cmp	r3, #29
 8000b98:	d001      	beq.n	8000b9e <__sflush_r+0xae>
 8000b9a:	2b16      	cmp	r3, #22
 8000b9c:	d101      	bne.n	8000ba2 <__sflush_r+0xb2>
 8000b9e:	602f      	str	r7, [r5, #0]
 8000ba0:	e7b2      	b.n	8000b08 <__sflush_r+0x18>
 8000ba2:	89a3      	ldrh	r3, [r4, #12]
 8000ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba8:	81a3      	strh	r3, [r4, #12]
 8000baa:	e7ae      	b.n	8000b0a <__sflush_r+0x1a>
 8000bac:	690f      	ldr	r7, [r1, #16]
 8000bae:	2f00      	cmp	r7, #0
 8000bb0:	d0aa      	beq.n	8000b08 <__sflush_r+0x18>
 8000bb2:	0793      	lsls	r3, r2, #30
 8000bb4:	680e      	ldr	r6, [r1, #0]
 8000bb6:	bf08      	it	eq
 8000bb8:	694b      	ldreq	r3, [r1, #20]
 8000bba:	600f      	str	r7, [r1, #0]
 8000bbc:	bf18      	it	ne
 8000bbe:	2300      	movne	r3, #0
 8000bc0:	1bf6      	subs	r6, r6, r7
 8000bc2:	608b      	str	r3, [r1, #8]
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	dd9f      	ble.n	8000b08 <__sflush_r+0x18>
 8000bc8:	6a21      	ldr	r1, [r4, #32]
 8000bca:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000bce:	4633      	mov	r3, r6
 8000bd0:	463a      	mov	r2, r7
 8000bd2:	4628      	mov	r0, r5
 8000bd4:	47e0      	blx	ip
 8000bd6:	2800      	cmp	r0, #0
 8000bd8:	dc06      	bgt.n	8000be8 <__sflush_r+0xf8>
 8000bda:	89a3      	ldrh	r3, [r4, #12]
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	81a3      	strh	r3, [r4, #12]
 8000be2:	f04f 30ff 	mov.w	r0, #4294967295
 8000be6:	e790      	b.n	8000b0a <__sflush_r+0x1a>
 8000be8:	4407      	add	r7, r0
 8000bea:	1a36      	subs	r6, r6, r0
 8000bec:	e7ea      	b.n	8000bc4 <__sflush_r+0xd4>
 8000bee:	bf00      	nop
 8000bf0:	20400001 	.word	0x20400001

08000bf4 <_fflush_r>:
 8000bf4:	b538      	push	{r3, r4, r5, lr}
 8000bf6:	690b      	ldr	r3, [r1, #16]
 8000bf8:	4605      	mov	r5, r0
 8000bfa:	460c      	mov	r4, r1
 8000bfc:	b913      	cbnz	r3, 8000c04 <_fflush_r+0x10>
 8000bfe:	2500      	movs	r5, #0
 8000c00:	4628      	mov	r0, r5
 8000c02:	bd38      	pop	{r3, r4, r5, pc}
 8000c04:	b118      	cbz	r0, 8000c0e <_fflush_r+0x1a>
 8000c06:	6983      	ldr	r3, [r0, #24]
 8000c08:	b90b      	cbnz	r3, 8000c0e <_fflush_r+0x1a>
 8000c0a:	f000 f887 	bl	8000d1c <__sinit>
 8000c0e:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <_fflush_r+0x6c>)
 8000c10:	429c      	cmp	r4, r3
 8000c12:	d11b      	bne.n	8000c4c <_fflush_r+0x58>
 8000c14:	686c      	ldr	r4, [r5, #4]
 8000c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0ef      	beq.n	8000bfe <_fflush_r+0xa>
 8000c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000c20:	07d0      	lsls	r0, r2, #31
 8000c22:	d404      	bmi.n	8000c2e <_fflush_r+0x3a>
 8000c24:	0599      	lsls	r1, r3, #22
 8000c26:	d402      	bmi.n	8000c2e <_fflush_r+0x3a>
 8000c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c2a:	f000 f915 	bl	8000e58 <__retarget_lock_acquire_recursive>
 8000c2e:	4628      	mov	r0, r5
 8000c30:	4621      	mov	r1, r4
 8000c32:	f7ff ff5d 	bl	8000af0 <__sflush_r>
 8000c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000c38:	07da      	lsls	r2, r3, #31
 8000c3a:	4605      	mov	r5, r0
 8000c3c:	d4e0      	bmi.n	8000c00 <_fflush_r+0xc>
 8000c3e:	89a3      	ldrh	r3, [r4, #12]
 8000c40:	059b      	lsls	r3, r3, #22
 8000c42:	d4dd      	bmi.n	8000c00 <_fflush_r+0xc>
 8000c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000c46:	f000 f908 	bl	8000e5a <__retarget_lock_release_recursive>
 8000c4a:	e7d9      	b.n	8000c00 <_fflush_r+0xc>
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <_fflush_r+0x70>)
 8000c4e:	429c      	cmp	r4, r3
 8000c50:	d101      	bne.n	8000c56 <_fflush_r+0x62>
 8000c52:	68ac      	ldr	r4, [r5, #8]
 8000c54:	e7df      	b.n	8000c16 <_fflush_r+0x22>
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <_fflush_r+0x74>)
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	bf08      	it	eq
 8000c5c:	68ec      	ldreq	r4, [r5, #12]
 8000c5e:	e7da      	b.n	8000c16 <_fflush_r+0x22>
 8000c60:	08001314 	.word	0x08001314
 8000c64:	08001334 	.word	0x08001334
 8000c68:	080012f4 	.word	0x080012f4

08000c6c <std>:
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	b510      	push	{r4, lr}
 8000c70:	4604      	mov	r4, r0
 8000c72:	e9c0 3300 	strd	r3, r3, [r0]
 8000c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c7a:	6083      	str	r3, [r0, #8]
 8000c7c:	8181      	strh	r1, [r0, #12]
 8000c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8000c80:	81c2      	strh	r2, [r0, #14]
 8000c82:	6183      	str	r3, [r0, #24]
 8000c84:	4619      	mov	r1, r3
 8000c86:	2208      	movs	r2, #8
 8000c88:	305c      	adds	r0, #92	; 0x5c
 8000c8a:	f7ff fdf3 	bl	8000874 <memset>
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <std+0x38>)
 8000c90:	6263      	str	r3, [r4, #36]	; 0x24
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <std+0x3c>)
 8000c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c96:	4b05      	ldr	r3, [pc, #20]	; (8000cac <std+0x40>)
 8000c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c9a:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <std+0x44>)
 8000c9c:	6224      	str	r4, [r4, #32]
 8000c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8000ca0:	bd10      	pop	{r4, pc}
 8000ca2:	bf00      	nop
 8000ca4:	08001105 	.word	0x08001105
 8000ca8:	08001127 	.word	0x08001127
 8000cac:	0800115f 	.word	0x0800115f
 8000cb0:	08001183 	.word	0x08001183

08000cb4 <_cleanup_r>:
 8000cb4:	4901      	ldr	r1, [pc, #4]	; (8000cbc <_cleanup_r+0x8>)
 8000cb6:	f000 b8af 	b.w	8000e18 <_fwalk_reent>
 8000cba:	bf00      	nop
 8000cbc:	08000bf5 	.word	0x08000bf5

08000cc0 <__sfmoreglue>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	2268      	movs	r2, #104	; 0x68
 8000cc4:	1e4d      	subs	r5, r1, #1
 8000cc6:	4355      	muls	r5, r2
 8000cc8:	460e      	mov	r6, r1
 8000cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000cce:	f000 f995 	bl	8000ffc <_malloc_r>
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	b140      	cbz	r0, 8000ce8 <__sfmoreglue+0x28>
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8000cdc:	300c      	adds	r0, #12
 8000cde:	60a0      	str	r0, [r4, #8]
 8000ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000ce4:	f7ff fdc6 	bl	8000874 <memset>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	bd70      	pop	{r4, r5, r6, pc}

08000cec <__sfp_lock_acquire>:
 8000cec:	4801      	ldr	r0, [pc, #4]	; (8000cf4 <__sfp_lock_acquire+0x8>)
 8000cee:	f000 b8b3 	b.w	8000e58 <__retarget_lock_acquire_recursive>
 8000cf2:	bf00      	nop
 8000cf4:	200000cd 	.word	0x200000cd

08000cf8 <__sfp_lock_release>:
 8000cf8:	4801      	ldr	r0, [pc, #4]	; (8000d00 <__sfp_lock_release+0x8>)
 8000cfa:	f000 b8ae 	b.w	8000e5a <__retarget_lock_release_recursive>
 8000cfe:	bf00      	nop
 8000d00:	200000cd 	.word	0x200000cd

08000d04 <__sinit_lock_acquire>:
 8000d04:	4801      	ldr	r0, [pc, #4]	; (8000d0c <__sinit_lock_acquire+0x8>)
 8000d06:	f000 b8a7 	b.w	8000e58 <__retarget_lock_acquire_recursive>
 8000d0a:	bf00      	nop
 8000d0c:	200000ce 	.word	0x200000ce

08000d10 <__sinit_lock_release>:
 8000d10:	4801      	ldr	r0, [pc, #4]	; (8000d18 <__sinit_lock_release+0x8>)
 8000d12:	f000 b8a2 	b.w	8000e5a <__retarget_lock_release_recursive>
 8000d16:	bf00      	nop
 8000d18:	200000ce 	.word	0x200000ce

08000d1c <__sinit>:
 8000d1c:	b510      	push	{r4, lr}
 8000d1e:	4604      	mov	r4, r0
 8000d20:	f7ff fff0 	bl	8000d04 <__sinit_lock_acquire>
 8000d24:	69a3      	ldr	r3, [r4, #24]
 8000d26:	b11b      	cbz	r3, 8000d30 <__sinit+0x14>
 8000d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d2c:	f7ff bff0 	b.w	8000d10 <__sinit_lock_release>
 8000d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000d34:	6523      	str	r3, [r4, #80]	; 0x50
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <__sinit+0x68>)
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <__sinit+0x6c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000d3e:	42a3      	cmp	r3, r4
 8000d40:	bf04      	itt	eq
 8000d42:	2301      	moveq	r3, #1
 8000d44:	61a3      	streq	r3, [r4, #24]
 8000d46:	4620      	mov	r0, r4
 8000d48:	f000 f820 	bl	8000d8c <__sfp>
 8000d4c:	6060      	str	r0, [r4, #4]
 8000d4e:	4620      	mov	r0, r4
 8000d50:	f000 f81c 	bl	8000d8c <__sfp>
 8000d54:	60a0      	str	r0, [r4, #8]
 8000d56:	4620      	mov	r0, r4
 8000d58:	f000 f818 	bl	8000d8c <__sfp>
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	60e0      	str	r0, [r4, #12]
 8000d60:	2104      	movs	r1, #4
 8000d62:	6860      	ldr	r0, [r4, #4]
 8000d64:	f7ff ff82 	bl	8000c6c <std>
 8000d68:	68a0      	ldr	r0, [r4, #8]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2109      	movs	r1, #9
 8000d6e:	f7ff ff7d 	bl	8000c6c <std>
 8000d72:	68e0      	ldr	r0, [r4, #12]
 8000d74:	2202      	movs	r2, #2
 8000d76:	2112      	movs	r1, #18
 8000d78:	f7ff ff78 	bl	8000c6c <std>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	61a3      	str	r3, [r4, #24]
 8000d80:	e7d2      	b.n	8000d28 <__sinit+0xc>
 8000d82:	bf00      	nop
 8000d84:	080012f0 	.word	0x080012f0
 8000d88:	08000cb5 	.word	0x08000cb5

08000d8c <__sfp>:
 8000d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8e:	4607      	mov	r7, r0
 8000d90:	f7ff ffac 	bl	8000cec <__sfp_lock_acquire>
 8000d94:	4b1e      	ldr	r3, [pc, #120]	; (8000e10 <__sfp+0x84>)
 8000d96:	681e      	ldr	r6, [r3, #0]
 8000d98:	69b3      	ldr	r3, [r6, #24]
 8000d9a:	b913      	cbnz	r3, 8000da2 <__sfp+0x16>
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	f7ff ffbd 	bl	8000d1c <__sinit>
 8000da2:	3648      	adds	r6, #72	; 0x48
 8000da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	d503      	bpl.n	8000db4 <__sfp+0x28>
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	b30b      	cbz	r3, 8000df4 <__sfp+0x68>
 8000db0:	6836      	ldr	r6, [r6, #0]
 8000db2:	e7f7      	b.n	8000da4 <__sfp+0x18>
 8000db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000db8:	b9d5      	cbnz	r5, 8000df0 <__sfp+0x64>
 8000dba:	4b16      	ldr	r3, [pc, #88]	; (8000e14 <__sfp+0x88>)
 8000dbc:	60e3      	str	r3, [r4, #12]
 8000dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8000dc4:	f000 f847 	bl	8000e56 <__retarget_lock_init_recursive>
 8000dc8:	f7ff ff96 	bl	8000cf8 <__sfp_lock_release>
 8000dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000dd4:	6025      	str	r5, [r4, #0]
 8000dd6:	61a5      	str	r5, [r4, #24]
 8000dd8:	2208      	movs	r2, #8
 8000dda:	4629      	mov	r1, r5
 8000ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000de0:	f7ff fd48 	bl	8000874 <memset>
 8000de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000dec:	4620      	mov	r0, r4
 8000dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000df0:	3468      	adds	r4, #104	; 0x68
 8000df2:	e7d9      	b.n	8000da8 <__sfp+0x1c>
 8000df4:	2104      	movs	r1, #4
 8000df6:	4638      	mov	r0, r7
 8000df8:	f7ff ff62 	bl	8000cc0 <__sfmoreglue>
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	6030      	str	r0, [r6, #0]
 8000e00:	2800      	cmp	r0, #0
 8000e02:	d1d5      	bne.n	8000db0 <__sfp+0x24>
 8000e04:	f7ff ff78 	bl	8000cf8 <__sfp_lock_release>
 8000e08:	230c      	movs	r3, #12
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	e7ee      	b.n	8000dec <__sfp+0x60>
 8000e0e:	bf00      	nop
 8000e10:	080012f0 	.word	0x080012f0
 8000e14:	ffff0001 	.word	0xffff0001

08000e18 <_fwalk_reent>:
 8000e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	4688      	mov	r8, r1
 8000e20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000e24:	2700      	movs	r7, #0
 8000e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8000e2e:	d505      	bpl.n	8000e3c <_fwalk_reent+0x24>
 8000e30:	6824      	ldr	r4, [r4, #0]
 8000e32:	2c00      	cmp	r4, #0
 8000e34:	d1f7      	bne.n	8000e26 <_fwalk_reent+0xe>
 8000e36:	4638      	mov	r0, r7
 8000e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e3c:	89ab      	ldrh	r3, [r5, #12]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d907      	bls.n	8000e52 <_fwalk_reent+0x3a>
 8000e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000e46:	3301      	adds	r3, #1
 8000e48:	d003      	beq.n	8000e52 <_fwalk_reent+0x3a>
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	47c0      	blx	r8
 8000e50:	4307      	orrs	r7, r0
 8000e52:	3568      	adds	r5, #104	; 0x68
 8000e54:	e7e9      	b.n	8000e2a <_fwalk_reent+0x12>

08000e56 <__retarget_lock_init_recursive>:
 8000e56:	4770      	bx	lr

08000e58 <__retarget_lock_acquire_recursive>:
 8000e58:	4770      	bx	lr

08000e5a <__retarget_lock_release_recursive>:
 8000e5a:	4770      	bx	lr

08000e5c <__swhatbuf_r>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	460e      	mov	r6, r1
 8000e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e64:	2900      	cmp	r1, #0
 8000e66:	b096      	sub	sp, #88	; 0x58
 8000e68:	4614      	mov	r4, r2
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	da08      	bge.n	8000e80 <__swhatbuf_r+0x24>
 8000e6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000e72:	2200      	movs	r2, #0
 8000e74:	602a      	str	r2, [r5, #0]
 8000e76:	061a      	lsls	r2, r3, #24
 8000e78:	d410      	bmi.n	8000e9c <__swhatbuf_r+0x40>
 8000e7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7e:	e00e      	b.n	8000e9e <__swhatbuf_r+0x42>
 8000e80:	466a      	mov	r2, sp
 8000e82:	f000 f9a5 	bl	80011d0 <_fstat_r>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	dbf1      	blt.n	8000e6e <__swhatbuf_r+0x12>
 8000e8a:	9a01      	ldr	r2, [sp, #4]
 8000e8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000e90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000e94:	425a      	negs	r2, r3
 8000e96:	415a      	adcs	r2, r3
 8000e98:	602a      	str	r2, [r5, #0]
 8000e9a:	e7ee      	b.n	8000e7a <__swhatbuf_r+0x1e>
 8000e9c:	2340      	movs	r3, #64	; 0x40
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	6023      	str	r3, [r4, #0]
 8000ea2:	b016      	add	sp, #88	; 0x58
 8000ea4:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ea8 <__smakebuf_r>:
 8000ea8:	898b      	ldrh	r3, [r1, #12]
 8000eaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000eac:	079d      	lsls	r5, r3, #30
 8000eae:	4606      	mov	r6, r0
 8000eb0:	460c      	mov	r4, r1
 8000eb2:	d507      	bpl.n	8000ec4 <__smakebuf_r+0x1c>
 8000eb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000eb8:	6023      	str	r3, [r4, #0]
 8000eba:	6123      	str	r3, [r4, #16]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	6163      	str	r3, [r4, #20]
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd70      	pop	{r4, r5, r6, pc}
 8000ec4:	ab01      	add	r3, sp, #4
 8000ec6:	466a      	mov	r2, sp
 8000ec8:	f7ff ffc8 	bl	8000e5c <__swhatbuf_r>
 8000ecc:	9900      	ldr	r1, [sp, #0]
 8000ece:	4605      	mov	r5, r0
 8000ed0:	4630      	mov	r0, r6
 8000ed2:	f000 f893 	bl	8000ffc <_malloc_r>
 8000ed6:	b948      	cbnz	r0, 8000eec <__smakebuf_r+0x44>
 8000ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000edc:	059a      	lsls	r2, r3, #22
 8000ede:	d4ef      	bmi.n	8000ec0 <__smakebuf_r+0x18>
 8000ee0:	f023 0303 	bic.w	r3, r3, #3
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	81a3      	strh	r3, [r4, #12]
 8000eea:	e7e3      	b.n	8000eb4 <__smakebuf_r+0xc>
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <__smakebuf_r+0x7c>)
 8000eee:	62b3      	str	r3, [r6, #40]	; 0x28
 8000ef0:	89a3      	ldrh	r3, [r4, #12]
 8000ef2:	6020      	str	r0, [r4, #0]
 8000ef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef8:	81a3      	strh	r3, [r4, #12]
 8000efa:	9b00      	ldr	r3, [sp, #0]
 8000efc:	6163      	str	r3, [r4, #20]
 8000efe:	9b01      	ldr	r3, [sp, #4]
 8000f00:	6120      	str	r0, [r4, #16]
 8000f02:	b15b      	cbz	r3, 8000f1c <__smakebuf_r+0x74>
 8000f04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f000 f973 	bl	80011f4 <_isatty_r>
 8000f0e:	b128      	cbz	r0, 8000f1c <__smakebuf_r+0x74>
 8000f10:	89a3      	ldrh	r3, [r4, #12]
 8000f12:	f023 0303 	bic.w	r3, r3, #3
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	81a3      	strh	r3, [r4, #12]
 8000f1c:	89a0      	ldrh	r0, [r4, #12]
 8000f1e:	4305      	orrs	r5, r0
 8000f20:	81a5      	strh	r5, [r4, #12]
 8000f22:	e7cd      	b.n	8000ec0 <__smakebuf_r+0x18>
 8000f24:	08000cb5 	.word	0x08000cb5

08000f28 <_free_r>:
 8000f28:	b538      	push	{r3, r4, r5, lr}
 8000f2a:	4605      	mov	r5, r0
 8000f2c:	2900      	cmp	r1, #0
 8000f2e:	d041      	beq.n	8000fb4 <_free_r+0x8c>
 8000f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f34:	1f0c      	subs	r4, r1, #4
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfb8      	it	lt
 8000f3a:	18e4      	addlt	r4, r4, r3
 8000f3c:	f000 f97c 	bl	8001238 <__malloc_lock>
 8000f40:	4a1d      	ldr	r2, [pc, #116]	; (8000fb8 <_free_r+0x90>)
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	b933      	cbnz	r3, 8000f54 <_free_r+0x2c>
 8000f46:	6063      	str	r3, [r4, #4]
 8000f48:	6014      	str	r4, [r2, #0]
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f50:	f000 b978 	b.w	8001244 <__malloc_unlock>
 8000f54:	42a3      	cmp	r3, r4
 8000f56:	d908      	bls.n	8000f6a <_free_r+0x42>
 8000f58:	6820      	ldr	r0, [r4, #0]
 8000f5a:	1821      	adds	r1, r4, r0
 8000f5c:	428b      	cmp	r3, r1
 8000f5e:	bf01      	itttt	eq
 8000f60:	6819      	ldreq	r1, [r3, #0]
 8000f62:	685b      	ldreq	r3, [r3, #4]
 8000f64:	1809      	addeq	r1, r1, r0
 8000f66:	6021      	streq	r1, [r4, #0]
 8000f68:	e7ed      	b.n	8000f46 <_free_r+0x1e>
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	b10b      	cbz	r3, 8000f74 <_free_r+0x4c>
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d9fa      	bls.n	8000f6a <_free_r+0x42>
 8000f74:	6811      	ldr	r1, [r2, #0]
 8000f76:	1850      	adds	r0, r2, r1
 8000f78:	42a0      	cmp	r0, r4
 8000f7a:	d10b      	bne.n	8000f94 <_free_r+0x6c>
 8000f7c:	6820      	ldr	r0, [r4, #0]
 8000f7e:	4401      	add	r1, r0
 8000f80:	1850      	adds	r0, r2, r1
 8000f82:	4283      	cmp	r3, r0
 8000f84:	6011      	str	r1, [r2, #0]
 8000f86:	d1e0      	bne.n	8000f4a <_free_r+0x22>
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	6053      	str	r3, [r2, #4]
 8000f8e:	4401      	add	r1, r0
 8000f90:	6011      	str	r1, [r2, #0]
 8000f92:	e7da      	b.n	8000f4a <_free_r+0x22>
 8000f94:	d902      	bls.n	8000f9c <_free_r+0x74>
 8000f96:	230c      	movs	r3, #12
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	e7d6      	b.n	8000f4a <_free_r+0x22>
 8000f9c:	6820      	ldr	r0, [r4, #0]
 8000f9e:	1821      	adds	r1, r4, r0
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	bf04      	itt	eq
 8000fa4:	6819      	ldreq	r1, [r3, #0]
 8000fa6:	685b      	ldreq	r3, [r3, #4]
 8000fa8:	6063      	str	r3, [r4, #4]
 8000faa:	bf04      	itt	eq
 8000fac:	1809      	addeq	r1, r1, r0
 8000fae:	6021      	streq	r1, [r4, #0]
 8000fb0:	6054      	str	r4, [r2, #4]
 8000fb2:	e7ca      	b.n	8000f4a <_free_r+0x22>
 8000fb4:	bd38      	pop	{r3, r4, r5, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200000d0 	.word	0x200000d0

08000fbc <sbrk_aligned>:
 8000fbc:	b570      	push	{r4, r5, r6, lr}
 8000fbe:	4e0e      	ldr	r6, [pc, #56]	; (8000ff8 <sbrk_aligned+0x3c>)
 8000fc0:	460c      	mov	r4, r1
 8000fc2:	6831      	ldr	r1, [r6, #0]
 8000fc4:	4605      	mov	r5, r0
 8000fc6:	b911      	cbnz	r1, 8000fce <sbrk_aligned+0x12>
 8000fc8:	f000 f88c 	bl	80010e4 <_sbrk_r>
 8000fcc:	6030      	str	r0, [r6, #0]
 8000fce:	4621      	mov	r1, r4
 8000fd0:	4628      	mov	r0, r5
 8000fd2:	f000 f887 	bl	80010e4 <_sbrk_r>
 8000fd6:	1c43      	adds	r3, r0, #1
 8000fd8:	d00a      	beq.n	8000ff0 <sbrk_aligned+0x34>
 8000fda:	1cc4      	adds	r4, r0, #3
 8000fdc:	f024 0403 	bic.w	r4, r4, #3
 8000fe0:	42a0      	cmp	r0, r4
 8000fe2:	d007      	beq.n	8000ff4 <sbrk_aligned+0x38>
 8000fe4:	1a21      	subs	r1, r4, r0
 8000fe6:	4628      	mov	r0, r5
 8000fe8:	f000 f87c 	bl	80010e4 <_sbrk_r>
 8000fec:	3001      	adds	r0, #1
 8000fee:	d101      	bne.n	8000ff4 <sbrk_aligned+0x38>
 8000ff0:	f04f 34ff 	mov.w	r4, #4294967295
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	bd70      	pop	{r4, r5, r6, pc}
 8000ff8:	200000d4 	.word	0x200000d4

08000ffc <_malloc_r>:
 8000ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001000:	1ccd      	adds	r5, r1, #3
 8001002:	f025 0503 	bic.w	r5, r5, #3
 8001006:	3508      	adds	r5, #8
 8001008:	2d0c      	cmp	r5, #12
 800100a:	bf38      	it	cc
 800100c:	250c      	movcc	r5, #12
 800100e:	2d00      	cmp	r5, #0
 8001010:	4607      	mov	r7, r0
 8001012:	db01      	blt.n	8001018 <_malloc_r+0x1c>
 8001014:	42a9      	cmp	r1, r5
 8001016:	d905      	bls.n	8001024 <_malloc_r+0x28>
 8001018:	230c      	movs	r3, #12
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	2600      	movs	r6, #0
 800101e:	4630      	mov	r0, r6
 8001020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001024:	4e2e      	ldr	r6, [pc, #184]	; (80010e0 <_malloc_r+0xe4>)
 8001026:	f000 f907 	bl	8001238 <__malloc_lock>
 800102a:	6833      	ldr	r3, [r6, #0]
 800102c:	461c      	mov	r4, r3
 800102e:	bb34      	cbnz	r4, 800107e <_malloc_r+0x82>
 8001030:	4629      	mov	r1, r5
 8001032:	4638      	mov	r0, r7
 8001034:	f7ff ffc2 	bl	8000fbc <sbrk_aligned>
 8001038:	1c43      	adds	r3, r0, #1
 800103a:	4604      	mov	r4, r0
 800103c:	d14d      	bne.n	80010da <_malloc_r+0xde>
 800103e:	6834      	ldr	r4, [r6, #0]
 8001040:	4626      	mov	r6, r4
 8001042:	2e00      	cmp	r6, #0
 8001044:	d140      	bne.n	80010c8 <_malloc_r+0xcc>
 8001046:	6823      	ldr	r3, [r4, #0]
 8001048:	4631      	mov	r1, r6
 800104a:	4638      	mov	r0, r7
 800104c:	eb04 0803 	add.w	r8, r4, r3
 8001050:	f000 f848 	bl	80010e4 <_sbrk_r>
 8001054:	4580      	cmp	r8, r0
 8001056:	d13a      	bne.n	80010ce <_malloc_r+0xd2>
 8001058:	6821      	ldr	r1, [r4, #0]
 800105a:	3503      	adds	r5, #3
 800105c:	1a6d      	subs	r5, r5, r1
 800105e:	f025 0503 	bic.w	r5, r5, #3
 8001062:	3508      	adds	r5, #8
 8001064:	2d0c      	cmp	r5, #12
 8001066:	bf38      	it	cc
 8001068:	250c      	movcc	r5, #12
 800106a:	4629      	mov	r1, r5
 800106c:	4638      	mov	r0, r7
 800106e:	f7ff ffa5 	bl	8000fbc <sbrk_aligned>
 8001072:	3001      	adds	r0, #1
 8001074:	d02b      	beq.n	80010ce <_malloc_r+0xd2>
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	442b      	add	r3, r5
 800107a:	6023      	str	r3, [r4, #0]
 800107c:	e00e      	b.n	800109c <_malloc_r+0xa0>
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	1b52      	subs	r2, r2, r5
 8001082:	d41e      	bmi.n	80010c2 <_malloc_r+0xc6>
 8001084:	2a0b      	cmp	r2, #11
 8001086:	d916      	bls.n	80010b6 <_malloc_r+0xba>
 8001088:	1961      	adds	r1, r4, r5
 800108a:	42a3      	cmp	r3, r4
 800108c:	6025      	str	r5, [r4, #0]
 800108e:	bf18      	it	ne
 8001090:	6059      	strne	r1, [r3, #4]
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	bf08      	it	eq
 8001096:	6031      	streq	r1, [r6, #0]
 8001098:	5162      	str	r2, [r4, r5]
 800109a:	604b      	str	r3, [r1, #4]
 800109c:	4638      	mov	r0, r7
 800109e:	f104 060b 	add.w	r6, r4, #11
 80010a2:	f000 f8cf 	bl	8001244 <__malloc_unlock>
 80010a6:	f026 0607 	bic.w	r6, r6, #7
 80010aa:	1d23      	adds	r3, r4, #4
 80010ac:	1af2      	subs	r2, r6, r3
 80010ae:	d0b6      	beq.n	800101e <_malloc_r+0x22>
 80010b0:	1b9b      	subs	r3, r3, r6
 80010b2:	50a3      	str	r3, [r4, r2]
 80010b4:	e7b3      	b.n	800101e <_malloc_r+0x22>
 80010b6:	6862      	ldr	r2, [r4, #4]
 80010b8:	42a3      	cmp	r3, r4
 80010ba:	bf0c      	ite	eq
 80010bc:	6032      	streq	r2, [r6, #0]
 80010be:	605a      	strne	r2, [r3, #4]
 80010c0:	e7ec      	b.n	800109c <_malloc_r+0xa0>
 80010c2:	4623      	mov	r3, r4
 80010c4:	6864      	ldr	r4, [r4, #4]
 80010c6:	e7b2      	b.n	800102e <_malloc_r+0x32>
 80010c8:	4634      	mov	r4, r6
 80010ca:	6876      	ldr	r6, [r6, #4]
 80010cc:	e7b9      	b.n	8001042 <_malloc_r+0x46>
 80010ce:	230c      	movs	r3, #12
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	4638      	mov	r0, r7
 80010d4:	f000 f8b6 	bl	8001244 <__malloc_unlock>
 80010d8:	e7a1      	b.n	800101e <_malloc_r+0x22>
 80010da:	6025      	str	r5, [r4, #0]
 80010dc:	e7de      	b.n	800109c <_malloc_r+0xa0>
 80010de:	bf00      	nop
 80010e0:	200000d0 	.word	0x200000d0

080010e4 <_sbrk_r>:
 80010e4:	b538      	push	{r3, r4, r5, lr}
 80010e6:	4d06      	ldr	r5, [pc, #24]	; (8001100 <_sbrk_r+0x1c>)
 80010e8:	2300      	movs	r3, #0
 80010ea:	4604      	mov	r4, r0
 80010ec:	4608      	mov	r0, r1
 80010ee:	602b      	str	r3, [r5, #0]
 80010f0:	f7ff fb36 	bl	8000760 <_sbrk>
 80010f4:	1c43      	adds	r3, r0, #1
 80010f6:	d102      	bne.n	80010fe <_sbrk_r+0x1a>
 80010f8:	682b      	ldr	r3, [r5, #0]
 80010fa:	b103      	cbz	r3, 80010fe <_sbrk_r+0x1a>
 80010fc:	6023      	str	r3, [r4, #0]
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	200000d8 	.word	0x200000d8

08001104 <__sread>:
 8001104:	b510      	push	{r4, lr}
 8001106:	460c      	mov	r4, r1
 8001108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800110c:	f000 f8a0 	bl	8001250 <_read_r>
 8001110:	2800      	cmp	r0, #0
 8001112:	bfab      	itete	ge
 8001114:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001116:	89a3      	ldrhlt	r3, [r4, #12]
 8001118:	181b      	addge	r3, r3, r0
 800111a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800111e:	bfac      	ite	ge
 8001120:	6563      	strge	r3, [r4, #84]	; 0x54
 8001122:	81a3      	strhlt	r3, [r4, #12]
 8001124:	bd10      	pop	{r4, pc}

08001126 <__swrite>:
 8001126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800112a:	461f      	mov	r7, r3
 800112c:	898b      	ldrh	r3, [r1, #12]
 800112e:	05db      	lsls	r3, r3, #23
 8001130:	4605      	mov	r5, r0
 8001132:	460c      	mov	r4, r1
 8001134:	4616      	mov	r6, r2
 8001136:	d505      	bpl.n	8001144 <__swrite+0x1e>
 8001138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113c:	2302      	movs	r3, #2
 800113e:	2200      	movs	r2, #0
 8001140:	f000 f868 	bl	8001214 <_lseek_r>
 8001144:	89a3      	ldrh	r3, [r4, #12]
 8001146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800114a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800114e:	81a3      	strh	r3, [r4, #12]
 8001150:	4632      	mov	r2, r6
 8001152:	463b      	mov	r3, r7
 8001154:	4628      	mov	r0, r5
 8001156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800115a:	f000 b817 	b.w	800118c <_write_r>

0800115e <__sseek>:
 800115e:	b510      	push	{r4, lr}
 8001160:	460c      	mov	r4, r1
 8001162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001166:	f000 f855 	bl	8001214 <_lseek_r>
 800116a:	1c43      	adds	r3, r0, #1
 800116c:	89a3      	ldrh	r3, [r4, #12]
 800116e:	bf15      	itete	ne
 8001170:	6560      	strne	r0, [r4, #84]	; 0x54
 8001172:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001176:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800117a:	81a3      	strheq	r3, [r4, #12]
 800117c:	bf18      	it	ne
 800117e:	81a3      	strhne	r3, [r4, #12]
 8001180:	bd10      	pop	{r4, pc}

08001182 <__sclose>:
 8001182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001186:	f000 b813 	b.w	80011b0 <_close_r>
	...

0800118c <_write_r>:
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4d07      	ldr	r5, [pc, #28]	; (80011ac <_write_r+0x20>)
 8001190:	4604      	mov	r4, r0
 8001192:	4608      	mov	r0, r1
 8001194:	4611      	mov	r1, r2
 8001196:	2200      	movs	r2, #0
 8001198:	602a      	str	r2, [r5, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	f7ff fa93 	bl	80006c6 <_write>
 80011a0:	1c43      	adds	r3, r0, #1
 80011a2:	d102      	bne.n	80011aa <_write_r+0x1e>
 80011a4:	682b      	ldr	r3, [r5, #0]
 80011a6:	b103      	cbz	r3, 80011aa <_write_r+0x1e>
 80011a8:	6023      	str	r3, [r4, #0]
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
 80011ac:	200000d8 	.word	0x200000d8

080011b0 <_close_r>:
 80011b0:	b538      	push	{r3, r4, r5, lr}
 80011b2:	4d06      	ldr	r5, [pc, #24]	; (80011cc <_close_r+0x1c>)
 80011b4:	2300      	movs	r3, #0
 80011b6:	4604      	mov	r4, r0
 80011b8:	4608      	mov	r0, r1
 80011ba:	602b      	str	r3, [r5, #0]
 80011bc:	f7ff fa9f 	bl	80006fe <_close>
 80011c0:	1c43      	adds	r3, r0, #1
 80011c2:	d102      	bne.n	80011ca <_close_r+0x1a>
 80011c4:	682b      	ldr	r3, [r5, #0]
 80011c6:	b103      	cbz	r3, 80011ca <_close_r+0x1a>
 80011c8:	6023      	str	r3, [r4, #0]
 80011ca:	bd38      	pop	{r3, r4, r5, pc}
 80011cc:	200000d8 	.word	0x200000d8

080011d0 <_fstat_r>:
 80011d0:	b538      	push	{r3, r4, r5, lr}
 80011d2:	4d07      	ldr	r5, [pc, #28]	; (80011f0 <_fstat_r+0x20>)
 80011d4:	2300      	movs	r3, #0
 80011d6:	4604      	mov	r4, r0
 80011d8:	4608      	mov	r0, r1
 80011da:	4611      	mov	r1, r2
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	f7ff fa99 	bl	8000714 <_fstat>
 80011e2:	1c43      	adds	r3, r0, #1
 80011e4:	d102      	bne.n	80011ec <_fstat_r+0x1c>
 80011e6:	682b      	ldr	r3, [r5, #0]
 80011e8:	b103      	cbz	r3, 80011ec <_fstat_r+0x1c>
 80011ea:	6023      	str	r3, [r4, #0]
 80011ec:	bd38      	pop	{r3, r4, r5, pc}
 80011ee:	bf00      	nop
 80011f0:	200000d8 	.word	0x200000d8

080011f4 <_isatty_r>:
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	4d06      	ldr	r5, [pc, #24]	; (8001210 <_isatty_r+0x1c>)
 80011f8:	2300      	movs	r3, #0
 80011fa:	4604      	mov	r4, r0
 80011fc:	4608      	mov	r0, r1
 80011fe:	602b      	str	r3, [r5, #0]
 8001200:	f7ff fa97 	bl	8000732 <_isatty>
 8001204:	1c43      	adds	r3, r0, #1
 8001206:	d102      	bne.n	800120e <_isatty_r+0x1a>
 8001208:	682b      	ldr	r3, [r5, #0]
 800120a:	b103      	cbz	r3, 800120e <_isatty_r+0x1a>
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	bd38      	pop	{r3, r4, r5, pc}
 8001210:	200000d8 	.word	0x200000d8

08001214 <_lseek_r>:
 8001214:	b538      	push	{r3, r4, r5, lr}
 8001216:	4d07      	ldr	r5, [pc, #28]	; (8001234 <_lseek_r+0x20>)
 8001218:	4604      	mov	r4, r0
 800121a:	4608      	mov	r0, r1
 800121c:	4611      	mov	r1, r2
 800121e:	2200      	movs	r2, #0
 8001220:	602a      	str	r2, [r5, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	f7ff fa8f 	bl	8000746 <_lseek>
 8001228:	1c43      	adds	r3, r0, #1
 800122a:	d102      	bne.n	8001232 <_lseek_r+0x1e>
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	b103      	cbz	r3, 8001232 <_lseek_r+0x1e>
 8001230:	6023      	str	r3, [r4, #0]
 8001232:	bd38      	pop	{r3, r4, r5, pc}
 8001234:	200000d8 	.word	0x200000d8

08001238 <__malloc_lock>:
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <__malloc_lock+0x8>)
 800123a:	f7ff be0d 	b.w	8000e58 <__retarget_lock_acquire_recursive>
 800123e:	bf00      	nop
 8001240:	200000cc 	.word	0x200000cc

08001244 <__malloc_unlock>:
 8001244:	4801      	ldr	r0, [pc, #4]	; (800124c <__malloc_unlock+0x8>)
 8001246:	f7ff be08 	b.w	8000e5a <__retarget_lock_release_recursive>
 800124a:	bf00      	nop
 800124c:	200000cc 	.word	0x200000cc

08001250 <_read_r>:
 8001250:	b538      	push	{r3, r4, r5, lr}
 8001252:	4d07      	ldr	r5, [pc, #28]	; (8001270 <_read_r+0x20>)
 8001254:	4604      	mov	r4, r0
 8001256:	4608      	mov	r0, r1
 8001258:	4611      	mov	r1, r2
 800125a:	2200      	movs	r2, #0
 800125c:	602a      	str	r2, [r5, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	f7ff fa14 	bl	800068c <_read>
 8001264:	1c43      	adds	r3, r0, #1
 8001266:	d102      	bne.n	800126e <_read_r+0x1e>
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	b103      	cbz	r3, 800126e <_read_r+0x1e>
 800126c:	6023      	str	r3, [r4, #0]
 800126e:	bd38      	pop	{r3, r4, r5, pc}
 8001270:	200000d8 	.word	0x200000d8

08001274 <_init>:
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	bf00      	nop
 8001278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800127a:	bc08      	pop	{r3}
 800127c:	469e      	mov	lr, r3
 800127e:	4770      	bx	lr

08001280 <_fini>:
 8001280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001282:	bf00      	nop
 8001284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001286:	bc08      	pop	{r3}
 8001288:	469e      	mov	lr, r3
 800128a:	4770      	bx	lr
