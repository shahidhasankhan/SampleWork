
001Sample.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f30  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080010d8  080010d8  000110d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011a8  080011a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080011a8  080011a8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011a8  080011a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011a8  080011a8  000111a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011ac  080011ac  000111ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080011b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000040  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000b0  200000b0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000b94  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003aa  00000000  00000000  00020c2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000198  00000000  00000000  00020fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000160  00000000  00000000  00021170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b10  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001548  00000000  00000000  00023de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009677  00000000  00000000  00025328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0002e99f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bf0  00000000  00000000  0002e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000070 	.word	0x20000070
 80001c4:	00000000 	.word	0x00000000
 80001c8:	080010c0 	.word	0x080010c0

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000074 	.word	0x20000074
 80001e4:	080010c0 	.word	0x080010c0

080001e8 <main>:
uint32_t tasksPSP[MAX_TASKS] = {TASK1_STACK_START,TASK2_STACK_START,TASK3_STACK_START};
uint32_t task_handlers[MAX_TASKS];
uint8_t  current_task = 0;

int main(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80001ec:	f000 f8c0 	bl	8000370 <enable_processor_faults>

	init_scheduler_stack(SCHEDULER_STACK_START);
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x28>)
 80001f2:	f000 f827 	bl	8000244 <init_scheduler_stack>
	init_task_handlers();
 80001f6:	f000 f82b 	bl	8000250 <init_task_handlers>
	init_task_stacks();
 80001fa:	f000 f841 	bl	8000280 <init_task_stacks>
	init_systick_timer(TICK_HZ);
 80001fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000202:	f000 f883 	bl	800030c <init_systick_timer>

	switch_SP_to_PSP();
 8000206:	f000 f8d5 	bl	80003b4 <switch_SP_to_PSP>

	default_handler();
 800020a:	f000 f813 	bl	8000234 <default_handler>
    /* Loop forever */
	for(;;);
 800020e:	e7fe      	b.n	800020e <main+0x26>
 8000210:	2001f400 	.word	0x2001f400

08000214 <task1_handler>:
}

void task1_handler(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("TASK1\n");
 8000218:	4801      	ldr	r0, [pc, #4]	; (8000220 <task1_handler+0xc>)
 800021a:	f000 fac7 	bl	80007ac <puts>
 800021e:	e7fb      	b.n	8000218 <task1_handler+0x4>
 8000220:	080010d8 	.word	0x080010d8

08000224 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("TASK2\n");
 8000228:	4801      	ldr	r0, [pc, #4]	; (8000230 <task2_handler+0xc>)
 800022a:	f000 fabf 	bl	80007ac <puts>
 800022e:	e7fb      	b.n	8000228 <task2_handler+0x4>
 8000230:	080010e0 	.word	0x080010e0

08000234 <default_handler>:
	}
}

void default_handler(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Default Task\n");
 8000238:	4801      	ldr	r0, [pc, #4]	; (8000240 <default_handler+0xc>)
 800023a:	f000 fab7 	bl	80007ac <puts>
 800023e:	e7fb      	b.n	8000238 <default_handler+0x4>
 8000240:	080010e8 	.word	0x080010e8

08000244 <init_scheduler_stack>:
	}
}

__attribute__((naked)) void init_scheduler_stack(uint32_t scheduler_stack_top)
{
 8000244:	4603      	mov	r3, r0
	//Load Value of scheduler stack top into MSP
	__asm volatile("MSR MSP,%0"::"r"(scheduler_stack_top):);
 8000246:	f383 8808 	msr	MSP, r3

	//Branch Back to Main
	__asm volatile("BX LR");
 800024a:	4770      	bx	lr
}
 800024c:	bf00      	nop
	...

08000250 <init_task_handlers>:

void init_task_handlers(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
	task_handlers[0]=(uint32_t)task1_handler;
 8000254:	4a06      	ldr	r2, [pc, #24]	; (8000270 <init_task_handlers+0x20>)
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <init_task_handlers+0x24>)
 8000258:	601a      	str	r2, [r3, #0]
	task_handlers[1]=(uint32_t)task2_handler;
 800025a:	4a07      	ldr	r2, [pc, #28]	; (8000278 <init_task_handlers+0x28>)
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <init_task_handlers+0x24>)
 800025e:	605a      	str	r2, [r3, #4]
	task_handlers[2]=(uint32_t)default_handler;
 8000260:	4a06      	ldr	r2, [pc, #24]	; (800027c <init_task_handlers+0x2c>)
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <init_task_handlers+0x24>)
 8000264:	609a      	str	r2, [r3, #8]
}
 8000266:	bf00      	nop
 8000268:	46bd      	mov	sp, r7
 800026a:	bc80      	pop	{r7}
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	08000215 	.word	0x08000215
 8000274:	2000008c 	.word	0x2000008c
 8000278:	08000225 	.word	0x08000225
 800027c:	08000235 	.word	0x08000235

08000280 <init_task_stacks>:

void init_task_stacks(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
	uint32_t *pPSP;
	for(int i=0;i<MAX_TASKS;i++)
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	e032      	b.n	80002f2 <init_task_stacks+0x72>
	{
		pPSP = (uint32_t*)tasksPSP[i];
 800028c:	4a1d      	ldr	r2, [pc, #116]	; (8000304 <init_task_stacks+0x84>)
 800028e:	68bb      	ldr	r3, [r7, #8]
 8000290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000294:	60fb      	str	r3, [r7, #12]

		//Stack Implementation is of Full Descending Type so Decrement by 1 before Pushing New Data
		pPSP--;
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	3b04      	subs	r3, #4
 800029a:	60fb      	str	r3, [r7, #12]
		//Put Dummy XPSR
		*pPSP = DUMMY_XPSR;  //Set T Bit (24th Bit) as 1 for Thumb Instruction Set Rest Are Ignored in the PSR
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002a2:	601a      	str	r2, [r3, #0]

		//Put PC
		pPSP--;
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	3b04      	subs	r3, #4
 80002a8:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[i];
 80002aa:	4a17      	ldr	r2, [pc, #92]	; (8000308 <init_task_stacks+0x88>)
 80002ac:	68bb      	ldr	r3, [r7, #8]
 80002ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b2:	68fb      	ldr	r3, [r7, #12]
 80002b4:	601a      	str	r2, [r3, #0]

		//Put LR
		pPSP--;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	3b04      	subs	r3, #4
 80002ba:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;  //EXC RETURN to Thread Mode with PSP as SP
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f06f 0202 	mvn.w	r2, #2
 80002c2:	601a      	str	r2, [r3, #0]

		//Put R0 to R13
		for(int j=0;j<13;j++)
 80002c4:	2300      	movs	r3, #0
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	e008      	b.n	80002dc <init_task_stacks+0x5c>
		{
			pPSP--;
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3b04      	subs	r3, #4
 80002ce:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	2200      	movs	r2, #0
 80002d4:	601a      	str	r2, [r3, #0]
		for(int j=0;j<13;j++)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	3301      	adds	r3, #1
 80002da:	607b      	str	r3, [r7, #4]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	2b0c      	cmp	r3, #12
 80002e0:	ddf3      	ble.n	80002ca <init_task_stacks+0x4a>
		}
		tasksPSP[i]=(uint32_t)pPSP;
 80002e2:	68fa      	ldr	r2, [r7, #12]
 80002e4:	4907      	ldr	r1, [pc, #28]	; (8000304 <init_task_stacks+0x84>)
 80002e6:	68bb      	ldr	r3, [r7, #8]
 80002e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0;i<MAX_TASKS;i++)
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	3301      	adds	r3, #1
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	ddc9      	ble.n	800028c <init_task_stacks+0xc>
	}
}
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	bc80      	pop	{r7}
 8000302:	4770      	bx	lr
 8000304:	20000000 	.word	0x20000000
 8000308:	2000008c 	.word	0x2000008c

0800030c <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz)
{
 800030c:	b480      	push	{r7}
 800030e:	b087      	sub	sp, #28
 8000310:	af00      	add	r7, sp, #0
 8000312:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;             //SYSTICK RELOAD VALUE REGISTER ADDRESS
 8000314:	4b13      	ldr	r3, [pc, #76]	; (8000364 <init_systick_timer+0x58>)
 8000316:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;			 //SYSTICK CONTROL AND STATUS REGISTER ADDRESS
 8000318:	4b13      	ldr	r3, [pc, #76]	; (8000368 <init_systick_timer+0x5c>)
 800031a:	613b      	str	r3, [r7, #16]

	uint32_t count_value = SYSTICK_TIMER_CLK /tick_hz -1;
 800031c:	4a13      	ldr	r2, [pc, #76]	; (800036c <init_systick_timer+0x60>)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	fbb2 f3f3 	udiv	r3, r2, r3
 8000324:	3b01      	subs	r3, #1
 8000326:	60fb      	str	r3, [r7, #12]

	//Reset Any Preloaded Values but leave the last 8 reserved bits untouched
	*pSRVR &= ~(0x00FFFFFF);
 8000328:	697b      	ldr	r3, [r7, #20]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000330:	697b      	ldr	r3, [r7, #20]
 8000332:	601a      	str	r2, [r3, #0]

	//Load Count Value into SRVR
	*pSRVR |= count_value;
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	431a      	orrs	r2, r3
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	601a      	str	r2, [r3, #0]

	//Enable Systick Exception at 1st Bit and Set Clock Source as Processor at 2nd Bit by setting them to 1
	*pSCSR |= (3 << 1);
 8000340:	693b      	ldr	r3, [r7, #16]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	f043 0206 	orr.w	r2, r3, #6
 8000348:	693b      	ldr	r3, [r7, #16]
 800034a:	601a      	str	r2, [r3, #0]

	//Enable Systick Counter by Setting 0th Bit of SCSR to 1
	*pSCSR |= (1 << 0);
 800034c:	693b      	ldr	r3, [r7, #16]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f043 0201 	orr.w	r2, r3, #1
 8000354:	693b      	ldr	r3, [r7, #16]
 8000356:	601a      	str	r2, [r3, #0]

}
 8000358:	bf00      	nop
 800035a:	371c      	adds	r7, #28
 800035c:	46bd      	mov	sp, r7
 800035e:	bc80      	pop	{r7}
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	e000e014 	.word	0xe000e014
 8000368:	e000e010 	.word	0xe000e010
 800036c:	00f42400 	.word	0x00f42400

08000370 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <enable_processor_faults+0x20>)
 8000378:	607b      	str	r3, [r7, #4]

	//Memory Management Fault at 16th Bit
	//Bus Fault at 17th Bit
	//Usage Fault at 18th Bit
	// 7 = 0b111
	*pSHCSR |= (7 << 16);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f443 22e0 	orr.w	r2, r3, #458752	; 0x70000
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	601a      	str	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr
 8000390:	e000ed24 	.word	0xe000ed24

08000394 <get_PSP_value>:

uint32_t get_PSP_value()
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	return tasksPSP[current_task];
 8000398:	4b04      	ldr	r3, [pc, #16]	; (80003ac <get_PSP_value+0x18>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	461a      	mov	r2, r3
 800039e:	4b04      	ldr	r3, [pc, #16]	; (80003b0 <get_PSP_value+0x1c>)
 80003a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bc80      	pop	{r7}
 80003aa:	4770      	bx	lr
 80003ac:	20000098 	.word	0x20000098
 80003b0:	20000000 	.word	0x20000000

080003b4 <switch_SP_to_PSP>:

__attribute__((naked)) void switch_SP_to_PSP(void)
{
	//Save Return Address to Main because we will jump to another function in next instruction and LR Value will be changed
	__asm volatile ("PUSH {LR}");
 80003b4:	b500      	push	{lr}
	__asm volatile ("BL get_PSP_value"); //Return Value will be in Register R0
 80003b6:	f7ff ffed 	bl	8000394 <get_PSP_value>
	//Set PSP value to Task Stack of Current Task
	__asm volatile ("MSR PSP,R0");
 80003ba:	f380 8809 	msr	PSP, r0
	//Pop the Return Address to Main back into LR
	__asm volatile ("POP {LR}");
 80003be:	f85d eb04 	ldr.w	lr, [sp], #4

	//Set CONTROL Register 1st Bit as 1 to Set MSP as Current Stack Point
	__asm volatile ("MOV R0,#0x02");
 80003c2:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 80003c6:	f380 8814 	msr	CONTROL, r0

	//No Epilogue for Naked functions so Go Back to Main manually
	__asm volatile ("BX LR");
 80003ca:	4770      	bx	lr
}
 80003cc:	bf00      	nop
	...

080003d0 <HardFault_Handler>:

void HardFault_Handler(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
	printf("Hard Fault Occurred\n");
 80003d4:	4801      	ldr	r0, [pc, #4]	; (80003dc <HardFault_Handler+0xc>)
 80003d6:	f000 f9e9 	bl	80007ac <puts>
	while(1);
 80003da:	e7fe      	b.n	80003da <HardFault_Handler+0xa>
 80003dc:	080010f8 	.word	0x080010f8

080003e0 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	printf("Memory Management Fault Occurred\n");
 80003e4:	4801      	ldr	r0, [pc, #4]	; (80003ec <MemManage_Handler+0xc>)
 80003e6:	f000 f9e1 	bl	80007ac <puts>
	while(1);
 80003ea:	e7fe      	b.n	80003ea <MemManage_Handler+0xa>
 80003ec:	0800110c 	.word	0x0800110c

080003f0 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	printf("Bus Fault Occurred\n");
 80003f4:	4801      	ldr	r0, [pc, #4]	; (80003fc <BusFault_Handler+0xc>)
 80003f6:	f000 f9d9 	bl	80007ac <puts>
	while(1);
 80003fa:	e7fe      	b.n	80003fa <BusFault_Handler+0xa>
 80003fc:	08001130 	.word	0x08001130

08000400 <set_PSP_value>:
}

void set_PSP_value(uint32_t current_task_stack_top)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	tasksPSP[current_task]=current_task_stack_top;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <set_PSP_value+0x20>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	4619      	mov	r1, r3
 800040e:	4a05      	ldr	r2, [pc, #20]	; (8000424 <set_PSP_value+0x24>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 8000416:	bf00      	nop
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	20000098 	.word	0x20000098
 8000424:	20000000 	.word	0x20000000

08000428 <switch_to_next_Task>:

void switch_to_next_Task(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	current_task++;
 800042c:	4b0b      	ldr	r3, [pc, #44]	; (800045c <switch_to_next_Task+0x34>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	3301      	adds	r3, #1
 8000432:	b2da      	uxtb	r2, r3
 8000434:	4b09      	ldr	r3, [pc, #36]	; (800045c <switch_to_next_Task+0x34>)
 8000436:	701a      	strb	r2, [r3, #0]
	//Get Back to First Task in Round Robin if Last Task on Queue is Done
	current_task %= MAX_TASKS;
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <switch_to_next_Task+0x34>)
 800043a:	781a      	ldrb	r2, [r3, #0]
 800043c:	4b08      	ldr	r3, [pc, #32]	; (8000460 <switch_to_next_Task+0x38>)
 800043e:	fba3 1302 	umull	r1, r3, r3, r2
 8000442:	0859      	lsrs	r1, r3, #1
 8000444:	460b      	mov	r3, r1
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	440b      	add	r3, r1
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	b2da      	uxtb	r2, r3
 800044e:	4b03      	ldr	r3, [pc, #12]	; (800045c <switch_to_next_Task+0x34>)
 8000450:	701a      	strb	r2, [r3, #0]
}
 8000452:	bf00      	nop
 8000454:	46bd      	mov	sp, r7
 8000456:	bc80      	pop	{r7}
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	20000098 	.word	0x20000098
 8000460:	aaaaaaab 	.word	0xaaaaaaab

08000464 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
	//Get PSP of Current Task
	__asm volatile("MRS R0,PSP");
 8000464:	f3ef 8009 	mrs	r0, PSP
	//R0-R3,R12,LR (Stack Frame 1)/Caller Saved Registers will be Automatically Saved at Function Call Time
	//Store Values of R4-R11 (SF2)/Callee Saved Registers as per Procedure Call Standard of AAPCS
	//We can not use PUSH because it will change the SP (PSP since we're in Privileged Mode)
	__asm volatile("STMDB R0!,{R4-R11}");
 8000468:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

	//Push LR i.e Return Address to Main in Main Stack
	//This is because we are going to jump to other functions and its value will be changed
	__asm volatile("PUSH {LR}");
 800046c:	b500      	push	{lr}

	//Set Updated PSP Value (after pushing SF2 to Global PSP of Current Task
	//According to AAPCS the called function will take its input from R0
	__asm volatile("BL set_PSP_value");
 800046e:	f7ff ffc7 	bl	8000400 <set_PSP_value>

	//Context of Current Task is Saved, Now Load Context of Next Task
	__asm volatile("BL switch_to_next_Task");
 8000472:	f7ff ffd9 	bl	8000428 <switch_to_next_Task>
	__asm volatile("BL get_PSP_value");  //Return Value i.e PSP of Next Task is in R0
 8000476:	f7ff ff8d 	bl	8000394 <get_PSP_value>

	//Load SF2/Callee Saved Registers/R4-R11 Back into the SFRs
	__asm volatile("LDMIA R0!,{R4-R11}");
 800047a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
	//Set PSP to Top of Next Tasks Stack Top
	__asm volatile("MSR PSP,R0");
 800047e:	f380 8809 	msr	PSP, r0

	//Pop LR i.e Return Address to Main back from Main Stack
	__asm volatile("POP {LR}");
 8000482:	f85d eb04 	ldr.w	lr, [sp], #4

	//This is a Naked Function so there is no Epilogue Sequence and we have to manually return to main
	__asm volatile("BX LR");
 8000486:	4770      	bx	lr
}
 8000488:	bf00      	nop
	...

0800048c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <ITM_SendChar+0x44>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a0d      	ldr	r2, [pc, #52]	; (80004d0 <ITM_SendChar+0x44>)
 800049c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004a0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <ITM_SendChar+0x48>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a0b      	ldr	r2, [pc, #44]	; (80004d4 <ITM_SendChar+0x48>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004ae:	bf00      	nop
 80004b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f8      	beq.n	80004b0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004be:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	6013      	str	r3, [r2, #0]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr
 80004d0:	e000edfc 	.word	0xe000edfc
 80004d4:	e0000e00 	.word	0xe0000e00

080004d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	60f8      	str	r0, [r7, #12]
 80004e0:	60b9      	str	r1, [r7, #8]
 80004e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e4:	2300      	movs	r3, #0
 80004e6:	617b      	str	r3, [r7, #20]
 80004e8:	e00a      	b.n	8000500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004ea:	f3af 8000 	nop.w
 80004ee:	4601      	mov	r1, r0
 80004f0:	68bb      	ldr	r3, [r7, #8]
 80004f2:	1c5a      	adds	r2, r3, #1
 80004f4:	60ba      	str	r2, [r7, #8]
 80004f6:	b2ca      	uxtb	r2, r1
 80004f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004fa:	697b      	ldr	r3, [r7, #20]
 80004fc:	3301      	adds	r3, #1
 80004fe:	617b      	str	r3, [r7, #20]
 8000500:	697a      	ldr	r2, [r7, #20]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	429a      	cmp	r2, r3
 8000506:	dbf0      	blt.n	80004ea <_read+0x12>
  }

  return len;
 8000508:	687b      	ldr	r3, [r7, #4]
}
 800050a:	4618      	mov	r0, r3
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b086      	sub	sp, #24
 8000516:	af00      	add	r7, sp, #0
 8000518:	60f8      	str	r0, [r7, #12]
 800051a:	60b9      	str	r1, [r7, #8]
 800051c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051e:	2300      	movs	r3, #0
 8000520:	617b      	str	r3, [r7, #20]
 8000522:	e009      	b.n	8000538 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	1c5a      	adds	r2, r3, #1
 8000528:	60ba      	str	r2, [r7, #8]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4618      	mov	r0, r3
 800052e:	f7ff ffad 	bl	800048c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	3301      	adds	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
 8000538:	697a      	ldr	r2, [r7, #20]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	429a      	cmp	r2, r3
 800053e:	dbf1      	blt.n	8000524 <_write+0x12>
  }
  return len;
 8000540:	687b      	ldr	r3, [r7, #4]
}
 8000542:	4618      	mov	r0, r3
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}

0800054a <_close>:

int _close(int file)
{
 800054a:	b480      	push	{r7}
 800054c:	b083      	sub	sp, #12
 800054e:	af00      	add	r7, sp, #0
 8000550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000556:	4618      	mov	r0, r3
 8000558:	370c      	adds	r7, #12
 800055a:	46bd      	mov	sp, r7
 800055c:	bc80      	pop	{r7}
 800055e:	4770      	bx	lr

08000560 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800056a:	683b      	ldr	r3, [r7, #0]
 800056c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000570:	605a      	str	r2, [r3, #4]
  return 0;
 8000572:	2300      	movs	r3, #0
}
 8000574:	4618      	mov	r0, r3
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr

0800057e <_isatty>:

int _isatty(int file)
{
 800057e:	b480      	push	{r7}
 8000580:	b083      	sub	sp, #12
 8000582:	af00      	add	r7, sp, #0
 8000584:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000592:	b480      	push	{r7}
 8000594:	b085      	sub	sp, #20
 8000596:	af00      	add	r7, sp, #0
 8000598:	60f8      	str	r0, [r7, #12]
 800059a:	60b9      	str	r1, [r7, #8]
 800059c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3714      	adds	r7, #20
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr
	...

080005ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b086      	sub	sp, #24
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <_sbrk+0x5c>)
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <_sbrk+0x60>)
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d102      	bne.n	80005ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <_sbrk+0x64>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <_sbrk+0x68>)
 80005cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <_sbrk+0x64>)
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4413      	add	r3, r2
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d207      	bcs.n	80005ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005dc:	f000 f846 	bl	800066c <__errno>
 80005e0:	4603      	mov	r3, r0
 80005e2:	220c      	movs	r2, #12
 80005e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e6:	f04f 33ff 	mov.w	r3, #4294967295
 80005ea:	e009      	b.n	8000600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005f2:	4b07      	ldr	r3, [pc, #28]	; (8000610 <_sbrk+0x64>)
 80005f4:	681a      	ldr	r2, [r3, #0]
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <_sbrk+0x64>)
 80005fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fe:	68fb      	ldr	r3, [r7, #12]
}
 8000600:	4618      	mov	r0, r3
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	20020000 	.word	0x20020000
 800060c:	00000400 	.word	0x00000400
 8000610:	2000009c 	.word	0x2000009c
 8000614:	200000b0 	.word	0x200000b0

08000618 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000618:	480d      	ldr	r0, [pc, #52]	; (8000650 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800061c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000620:	480c      	ldr	r0, [pc, #48]	; (8000654 <LoopForever+0x6>)
  ldr r1, =_edata
 8000622:	490d      	ldr	r1, [pc, #52]	; (8000658 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000624:	4a0d      	ldr	r2, [pc, #52]	; (800065c <LoopForever+0xe>)
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000628:	e002      	b.n	8000630 <LoopCopyDataInit>

0800062a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800062c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062e:	3304      	adds	r3, #4

08000630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000634:	d3f9      	bcc.n	800062a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000636:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000638:	4c0a      	ldr	r4, [pc, #40]	; (8000664 <LoopForever+0x16>)
  movs r3, #0
 800063a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800063c:	e001      	b.n	8000642 <LoopFillZerobss>

0800063e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000640:	3204      	adds	r2, #4

08000642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000644:	d3fb      	bcc.n	800063e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000646:	f000 f817 	bl	8000678 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064a:	f7ff fdcd 	bl	80001e8 <main>

0800064e <LoopForever>:

LoopForever:
  b LoopForever
 800064e:	e7fe      	b.n	800064e <LoopForever>
  ldr   r0, =_estack
 8000650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000658:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800065c:	080011b0 	.word	0x080011b0
  ldr r2, =_sbss
 8000660:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000664:	200000b0 	.word	0x200000b0

08000668 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000668:	e7fe      	b.n	8000668 <ADC_IRQHandler>
	...

0800066c <__errno>:
 800066c:	4b01      	ldr	r3, [pc, #4]	; (8000674 <__errno+0x8>)
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000000c 	.word	0x2000000c

08000678 <__libc_init_array>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	4d0d      	ldr	r5, [pc, #52]	; (80006b0 <__libc_init_array+0x38>)
 800067c:	4c0d      	ldr	r4, [pc, #52]	; (80006b4 <__libc_init_array+0x3c>)
 800067e:	1b64      	subs	r4, r4, r5
 8000680:	10a4      	asrs	r4, r4, #2
 8000682:	2600      	movs	r6, #0
 8000684:	42a6      	cmp	r6, r4
 8000686:	d109      	bne.n	800069c <__libc_init_array+0x24>
 8000688:	4d0b      	ldr	r5, [pc, #44]	; (80006b8 <__libc_init_array+0x40>)
 800068a:	4c0c      	ldr	r4, [pc, #48]	; (80006bc <__libc_init_array+0x44>)
 800068c:	f000 fd18 	bl	80010c0 <_init>
 8000690:	1b64      	subs	r4, r4, r5
 8000692:	10a4      	asrs	r4, r4, #2
 8000694:	2600      	movs	r6, #0
 8000696:	42a6      	cmp	r6, r4
 8000698:	d105      	bne.n	80006a6 <__libc_init_array+0x2e>
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f855 3b04 	ldr.w	r3, [r5], #4
 80006a0:	4798      	blx	r3
 80006a2:	3601      	adds	r6, #1
 80006a4:	e7ee      	b.n	8000684 <__libc_init_array+0xc>
 80006a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80006aa:	4798      	blx	r3
 80006ac:	3601      	adds	r6, #1
 80006ae:	e7f2      	b.n	8000696 <__libc_init_array+0x1e>
 80006b0:	080011a8 	.word	0x080011a8
 80006b4:	080011a8 	.word	0x080011a8
 80006b8:	080011a8 	.word	0x080011a8
 80006bc:	080011ac 	.word	0x080011ac

080006c0 <memset>:
 80006c0:	4402      	add	r2, r0
 80006c2:	4603      	mov	r3, r0
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d100      	bne.n	80006ca <memset+0xa>
 80006c8:	4770      	bx	lr
 80006ca:	f803 1b01 	strb.w	r1, [r3], #1
 80006ce:	e7f9      	b.n	80006c4 <memset+0x4>

080006d0 <_puts_r>:
 80006d0:	b570      	push	{r4, r5, r6, lr}
 80006d2:	460e      	mov	r6, r1
 80006d4:	4605      	mov	r5, r0
 80006d6:	b118      	cbz	r0, 80006e0 <_puts_r+0x10>
 80006d8:	6983      	ldr	r3, [r0, #24]
 80006da:	b90b      	cbnz	r3, 80006e0 <_puts_r+0x10>
 80006dc:	f000 fa44 	bl	8000b68 <__sinit>
 80006e0:	69ab      	ldr	r3, [r5, #24]
 80006e2:	68ac      	ldr	r4, [r5, #8]
 80006e4:	b913      	cbnz	r3, 80006ec <_puts_r+0x1c>
 80006e6:	4628      	mov	r0, r5
 80006e8:	f000 fa3e 	bl	8000b68 <__sinit>
 80006ec:	4b2c      	ldr	r3, [pc, #176]	; (80007a0 <_puts_r+0xd0>)
 80006ee:	429c      	cmp	r4, r3
 80006f0:	d120      	bne.n	8000734 <_puts_r+0x64>
 80006f2:	686c      	ldr	r4, [r5, #4]
 80006f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	d405      	bmi.n	8000706 <_puts_r+0x36>
 80006fa:	89a3      	ldrh	r3, [r4, #12]
 80006fc:	0598      	lsls	r0, r3, #22
 80006fe:	d402      	bmi.n	8000706 <_puts_r+0x36>
 8000700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000702:	f000 facf 	bl	8000ca4 <__retarget_lock_acquire_recursive>
 8000706:	89a3      	ldrh	r3, [r4, #12]
 8000708:	0719      	lsls	r1, r3, #28
 800070a:	d51d      	bpl.n	8000748 <_puts_r+0x78>
 800070c:	6923      	ldr	r3, [r4, #16]
 800070e:	b1db      	cbz	r3, 8000748 <_puts_r+0x78>
 8000710:	3e01      	subs	r6, #1
 8000712:	68a3      	ldr	r3, [r4, #8]
 8000714:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000718:	3b01      	subs	r3, #1
 800071a:	60a3      	str	r3, [r4, #8]
 800071c:	bb39      	cbnz	r1, 800076e <_puts_r+0x9e>
 800071e:	2b00      	cmp	r3, #0
 8000720:	da38      	bge.n	8000794 <_puts_r+0xc4>
 8000722:	4622      	mov	r2, r4
 8000724:	210a      	movs	r1, #10
 8000726:	4628      	mov	r0, r5
 8000728:	f000 f848 	bl	80007bc <__swbuf_r>
 800072c:	3001      	adds	r0, #1
 800072e:	d011      	beq.n	8000754 <_puts_r+0x84>
 8000730:	250a      	movs	r5, #10
 8000732:	e011      	b.n	8000758 <_puts_r+0x88>
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <_puts_r+0xd4>)
 8000736:	429c      	cmp	r4, r3
 8000738:	d101      	bne.n	800073e <_puts_r+0x6e>
 800073a:	68ac      	ldr	r4, [r5, #8]
 800073c:	e7da      	b.n	80006f4 <_puts_r+0x24>
 800073e:	4b1a      	ldr	r3, [pc, #104]	; (80007a8 <_puts_r+0xd8>)
 8000740:	429c      	cmp	r4, r3
 8000742:	bf08      	it	eq
 8000744:	68ec      	ldreq	r4, [r5, #12]
 8000746:	e7d5      	b.n	80006f4 <_puts_r+0x24>
 8000748:	4621      	mov	r1, r4
 800074a:	4628      	mov	r0, r5
 800074c:	f000 f888 	bl	8000860 <__swsetup_r>
 8000750:	2800      	cmp	r0, #0
 8000752:	d0dd      	beq.n	8000710 <_puts_r+0x40>
 8000754:	f04f 35ff 	mov.w	r5, #4294967295
 8000758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800075a:	07da      	lsls	r2, r3, #31
 800075c:	d405      	bmi.n	800076a <_puts_r+0x9a>
 800075e:	89a3      	ldrh	r3, [r4, #12]
 8000760:	059b      	lsls	r3, r3, #22
 8000762:	d402      	bmi.n	800076a <_puts_r+0x9a>
 8000764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000766:	f000 fa9e 	bl	8000ca6 <__retarget_lock_release_recursive>
 800076a:	4628      	mov	r0, r5
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	2b00      	cmp	r3, #0
 8000770:	da04      	bge.n	800077c <_puts_r+0xac>
 8000772:	69a2      	ldr	r2, [r4, #24]
 8000774:	429a      	cmp	r2, r3
 8000776:	dc06      	bgt.n	8000786 <_puts_r+0xb6>
 8000778:	290a      	cmp	r1, #10
 800077a:	d004      	beq.n	8000786 <_puts_r+0xb6>
 800077c:	6823      	ldr	r3, [r4, #0]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	6022      	str	r2, [r4, #0]
 8000782:	7019      	strb	r1, [r3, #0]
 8000784:	e7c5      	b.n	8000712 <_puts_r+0x42>
 8000786:	4622      	mov	r2, r4
 8000788:	4628      	mov	r0, r5
 800078a:	f000 f817 	bl	80007bc <__swbuf_r>
 800078e:	3001      	adds	r0, #1
 8000790:	d1bf      	bne.n	8000712 <_puts_r+0x42>
 8000792:	e7df      	b.n	8000754 <_puts_r+0x84>
 8000794:	6823      	ldr	r3, [r4, #0]
 8000796:	250a      	movs	r5, #10
 8000798:	1c5a      	adds	r2, r3, #1
 800079a:	6022      	str	r2, [r4, #0]
 800079c:	701d      	strb	r5, [r3, #0]
 800079e:	e7db      	b.n	8000758 <_puts_r+0x88>
 80007a0:	08001168 	.word	0x08001168
 80007a4:	08001188 	.word	0x08001188
 80007a8:	08001148 	.word	0x08001148

080007ac <puts>:
 80007ac:	4b02      	ldr	r3, [pc, #8]	; (80007b8 <puts+0xc>)
 80007ae:	4601      	mov	r1, r0
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	f7ff bf8d 	b.w	80006d0 <_puts_r>
 80007b6:	bf00      	nop
 80007b8:	2000000c 	.word	0x2000000c

080007bc <__swbuf_r>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	460e      	mov	r6, r1
 80007c0:	4614      	mov	r4, r2
 80007c2:	4605      	mov	r5, r0
 80007c4:	b118      	cbz	r0, 80007ce <__swbuf_r+0x12>
 80007c6:	6983      	ldr	r3, [r0, #24]
 80007c8:	b90b      	cbnz	r3, 80007ce <__swbuf_r+0x12>
 80007ca:	f000 f9cd 	bl	8000b68 <__sinit>
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <__swbuf_r+0x98>)
 80007d0:	429c      	cmp	r4, r3
 80007d2:	d12b      	bne.n	800082c <__swbuf_r+0x70>
 80007d4:	686c      	ldr	r4, [r5, #4]
 80007d6:	69a3      	ldr	r3, [r4, #24]
 80007d8:	60a3      	str	r3, [r4, #8]
 80007da:	89a3      	ldrh	r3, [r4, #12]
 80007dc:	071a      	lsls	r2, r3, #28
 80007de:	d52f      	bpl.n	8000840 <__swbuf_r+0x84>
 80007e0:	6923      	ldr	r3, [r4, #16]
 80007e2:	b36b      	cbz	r3, 8000840 <__swbuf_r+0x84>
 80007e4:	6923      	ldr	r3, [r4, #16]
 80007e6:	6820      	ldr	r0, [r4, #0]
 80007e8:	1ac0      	subs	r0, r0, r3
 80007ea:	6963      	ldr	r3, [r4, #20]
 80007ec:	b2f6      	uxtb	r6, r6
 80007ee:	4283      	cmp	r3, r0
 80007f0:	4637      	mov	r7, r6
 80007f2:	dc04      	bgt.n	80007fe <__swbuf_r+0x42>
 80007f4:	4621      	mov	r1, r4
 80007f6:	4628      	mov	r0, r5
 80007f8:	f000 f922 	bl	8000a40 <_fflush_r>
 80007fc:	bb30      	cbnz	r0, 800084c <__swbuf_r+0x90>
 80007fe:	68a3      	ldr	r3, [r4, #8]
 8000800:	3b01      	subs	r3, #1
 8000802:	60a3      	str	r3, [r4, #8]
 8000804:	6823      	ldr	r3, [r4, #0]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	6022      	str	r2, [r4, #0]
 800080a:	701e      	strb	r6, [r3, #0]
 800080c:	6963      	ldr	r3, [r4, #20]
 800080e:	3001      	adds	r0, #1
 8000810:	4283      	cmp	r3, r0
 8000812:	d004      	beq.n	800081e <__swbuf_r+0x62>
 8000814:	89a3      	ldrh	r3, [r4, #12]
 8000816:	07db      	lsls	r3, r3, #31
 8000818:	d506      	bpl.n	8000828 <__swbuf_r+0x6c>
 800081a:	2e0a      	cmp	r6, #10
 800081c:	d104      	bne.n	8000828 <__swbuf_r+0x6c>
 800081e:	4621      	mov	r1, r4
 8000820:	4628      	mov	r0, r5
 8000822:	f000 f90d 	bl	8000a40 <_fflush_r>
 8000826:	b988      	cbnz	r0, 800084c <__swbuf_r+0x90>
 8000828:	4638      	mov	r0, r7
 800082a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800082c:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <__swbuf_r+0x9c>)
 800082e:	429c      	cmp	r4, r3
 8000830:	d101      	bne.n	8000836 <__swbuf_r+0x7a>
 8000832:	68ac      	ldr	r4, [r5, #8]
 8000834:	e7cf      	b.n	80007d6 <__swbuf_r+0x1a>
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <__swbuf_r+0xa0>)
 8000838:	429c      	cmp	r4, r3
 800083a:	bf08      	it	eq
 800083c:	68ec      	ldreq	r4, [r5, #12]
 800083e:	e7ca      	b.n	80007d6 <__swbuf_r+0x1a>
 8000840:	4621      	mov	r1, r4
 8000842:	4628      	mov	r0, r5
 8000844:	f000 f80c 	bl	8000860 <__swsetup_r>
 8000848:	2800      	cmp	r0, #0
 800084a:	d0cb      	beq.n	80007e4 <__swbuf_r+0x28>
 800084c:	f04f 37ff 	mov.w	r7, #4294967295
 8000850:	e7ea      	b.n	8000828 <__swbuf_r+0x6c>
 8000852:	bf00      	nop
 8000854:	08001168 	.word	0x08001168
 8000858:	08001188 	.word	0x08001188
 800085c:	08001148 	.word	0x08001148

08000860 <__swsetup_r>:
 8000860:	4b32      	ldr	r3, [pc, #200]	; (800092c <__swsetup_r+0xcc>)
 8000862:	b570      	push	{r4, r5, r6, lr}
 8000864:	681d      	ldr	r5, [r3, #0]
 8000866:	4606      	mov	r6, r0
 8000868:	460c      	mov	r4, r1
 800086a:	b125      	cbz	r5, 8000876 <__swsetup_r+0x16>
 800086c:	69ab      	ldr	r3, [r5, #24]
 800086e:	b913      	cbnz	r3, 8000876 <__swsetup_r+0x16>
 8000870:	4628      	mov	r0, r5
 8000872:	f000 f979 	bl	8000b68 <__sinit>
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <__swsetup_r+0xd0>)
 8000878:	429c      	cmp	r4, r3
 800087a:	d10f      	bne.n	800089c <__swsetup_r+0x3c>
 800087c:	686c      	ldr	r4, [r5, #4]
 800087e:	89a3      	ldrh	r3, [r4, #12]
 8000880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000884:	0719      	lsls	r1, r3, #28
 8000886:	d42c      	bmi.n	80008e2 <__swsetup_r+0x82>
 8000888:	06dd      	lsls	r5, r3, #27
 800088a:	d411      	bmi.n	80008b0 <__swsetup_r+0x50>
 800088c:	2309      	movs	r3, #9
 800088e:	6033      	str	r3, [r6, #0]
 8000890:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000894:	81a3      	strh	r3, [r4, #12]
 8000896:	f04f 30ff 	mov.w	r0, #4294967295
 800089a:	e03e      	b.n	800091a <__swsetup_r+0xba>
 800089c:	4b25      	ldr	r3, [pc, #148]	; (8000934 <__swsetup_r+0xd4>)
 800089e:	429c      	cmp	r4, r3
 80008a0:	d101      	bne.n	80008a6 <__swsetup_r+0x46>
 80008a2:	68ac      	ldr	r4, [r5, #8]
 80008a4:	e7eb      	b.n	800087e <__swsetup_r+0x1e>
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <__swsetup_r+0xd8>)
 80008a8:	429c      	cmp	r4, r3
 80008aa:	bf08      	it	eq
 80008ac:	68ec      	ldreq	r4, [r5, #12]
 80008ae:	e7e6      	b.n	800087e <__swsetup_r+0x1e>
 80008b0:	0758      	lsls	r0, r3, #29
 80008b2:	d512      	bpl.n	80008da <__swsetup_r+0x7a>
 80008b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80008b6:	b141      	cbz	r1, 80008ca <__swsetup_r+0x6a>
 80008b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80008bc:	4299      	cmp	r1, r3
 80008be:	d002      	beq.n	80008c6 <__swsetup_r+0x66>
 80008c0:	4630      	mov	r0, r6
 80008c2:	f000 fa57 	bl	8000d74 <_free_r>
 80008c6:	2300      	movs	r3, #0
 80008c8:	6363      	str	r3, [r4, #52]	; 0x34
 80008ca:	89a3      	ldrh	r3, [r4, #12]
 80008cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80008d0:	81a3      	strh	r3, [r4, #12]
 80008d2:	2300      	movs	r3, #0
 80008d4:	6063      	str	r3, [r4, #4]
 80008d6:	6923      	ldr	r3, [r4, #16]
 80008d8:	6023      	str	r3, [r4, #0]
 80008da:	89a3      	ldrh	r3, [r4, #12]
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	81a3      	strh	r3, [r4, #12]
 80008e2:	6923      	ldr	r3, [r4, #16]
 80008e4:	b94b      	cbnz	r3, 80008fa <__swsetup_r+0x9a>
 80008e6:	89a3      	ldrh	r3, [r4, #12]
 80008e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80008ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008f0:	d003      	beq.n	80008fa <__swsetup_r+0x9a>
 80008f2:	4621      	mov	r1, r4
 80008f4:	4630      	mov	r0, r6
 80008f6:	f000 f9fd 	bl	8000cf4 <__smakebuf_r>
 80008fa:	89a0      	ldrh	r0, [r4, #12]
 80008fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000900:	f010 0301 	ands.w	r3, r0, #1
 8000904:	d00a      	beq.n	800091c <__swsetup_r+0xbc>
 8000906:	2300      	movs	r3, #0
 8000908:	60a3      	str	r3, [r4, #8]
 800090a:	6963      	ldr	r3, [r4, #20]
 800090c:	425b      	negs	r3, r3
 800090e:	61a3      	str	r3, [r4, #24]
 8000910:	6923      	ldr	r3, [r4, #16]
 8000912:	b943      	cbnz	r3, 8000926 <__swsetup_r+0xc6>
 8000914:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000918:	d1ba      	bne.n	8000890 <__swsetup_r+0x30>
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	0781      	lsls	r1, r0, #30
 800091e:	bf58      	it	pl
 8000920:	6963      	ldrpl	r3, [r4, #20]
 8000922:	60a3      	str	r3, [r4, #8]
 8000924:	e7f4      	b.n	8000910 <__swsetup_r+0xb0>
 8000926:	2000      	movs	r0, #0
 8000928:	e7f7      	b.n	800091a <__swsetup_r+0xba>
 800092a:	bf00      	nop
 800092c:	2000000c 	.word	0x2000000c
 8000930:	08001168 	.word	0x08001168
 8000934:	08001188 	.word	0x08001188
 8000938:	08001148 	.word	0x08001148

0800093c <__sflush_r>:
 800093c:	898a      	ldrh	r2, [r1, #12]
 800093e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000940:	4605      	mov	r5, r0
 8000942:	0710      	lsls	r0, r2, #28
 8000944:	460c      	mov	r4, r1
 8000946:	d457      	bmi.n	80009f8 <__sflush_r+0xbc>
 8000948:	684b      	ldr	r3, [r1, #4]
 800094a:	2b00      	cmp	r3, #0
 800094c:	dc04      	bgt.n	8000958 <__sflush_r+0x1c>
 800094e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000950:	2b00      	cmp	r3, #0
 8000952:	dc01      	bgt.n	8000958 <__sflush_r+0x1c>
 8000954:	2000      	movs	r0, #0
 8000956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800095a:	2e00      	cmp	r6, #0
 800095c:	d0fa      	beq.n	8000954 <__sflush_r+0x18>
 800095e:	2300      	movs	r3, #0
 8000960:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000964:	682f      	ldr	r7, [r5, #0]
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	d032      	beq.n	80009d0 <__sflush_r+0x94>
 800096a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	075a      	lsls	r2, r3, #29
 8000970:	d505      	bpl.n	800097e <__sflush_r+0x42>
 8000972:	6863      	ldr	r3, [r4, #4]
 8000974:	1ac0      	subs	r0, r0, r3
 8000976:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000978:	b10b      	cbz	r3, 800097e <__sflush_r+0x42>
 800097a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800097c:	1ac0      	subs	r0, r0, r3
 800097e:	2300      	movs	r3, #0
 8000980:	4602      	mov	r2, r0
 8000982:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000984:	6a21      	ldr	r1, [r4, #32]
 8000986:	4628      	mov	r0, r5
 8000988:	47b0      	blx	r6
 800098a:	1c43      	adds	r3, r0, #1
 800098c:	89a3      	ldrh	r3, [r4, #12]
 800098e:	d106      	bne.n	800099e <__sflush_r+0x62>
 8000990:	6829      	ldr	r1, [r5, #0]
 8000992:	291d      	cmp	r1, #29
 8000994:	d82c      	bhi.n	80009f0 <__sflush_r+0xb4>
 8000996:	4a29      	ldr	r2, [pc, #164]	; (8000a3c <__sflush_r+0x100>)
 8000998:	40ca      	lsrs	r2, r1
 800099a:	07d6      	lsls	r6, r2, #31
 800099c:	d528      	bpl.n	80009f0 <__sflush_r+0xb4>
 800099e:	2200      	movs	r2, #0
 80009a0:	6062      	str	r2, [r4, #4]
 80009a2:	04d9      	lsls	r1, r3, #19
 80009a4:	6922      	ldr	r2, [r4, #16]
 80009a6:	6022      	str	r2, [r4, #0]
 80009a8:	d504      	bpl.n	80009b4 <__sflush_r+0x78>
 80009aa:	1c42      	adds	r2, r0, #1
 80009ac:	d101      	bne.n	80009b2 <__sflush_r+0x76>
 80009ae:	682b      	ldr	r3, [r5, #0]
 80009b0:	b903      	cbnz	r3, 80009b4 <__sflush_r+0x78>
 80009b2:	6560      	str	r0, [r4, #84]	; 0x54
 80009b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009b6:	602f      	str	r7, [r5, #0]
 80009b8:	2900      	cmp	r1, #0
 80009ba:	d0cb      	beq.n	8000954 <__sflush_r+0x18>
 80009bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009c0:	4299      	cmp	r1, r3
 80009c2:	d002      	beq.n	80009ca <__sflush_r+0x8e>
 80009c4:	4628      	mov	r0, r5
 80009c6:	f000 f9d5 	bl	8000d74 <_free_r>
 80009ca:	2000      	movs	r0, #0
 80009cc:	6360      	str	r0, [r4, #52]	; 0x34
 80009ce:	e7c2      	b.n	8000956 <__sflush_r+0x1a>
 80009d0:	6a21      	ldr	r1, [r4, #32]
 80009d2:	2301      	movs	r3, #1
 80009d4:	4628      	mov	r0, r5
 80009d6:	47b0      	blx	r6
 80009d8:	1c41      	adds	r1, r0, #1
 80009da:	d1c7      	bne.n	800096c <__sflush_r+0x30>
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0c4      	beq.n	800096c <__sflush_r+0x30>
 80009e2:	2b1d      	cmp	r3, #29
 80009e4:	d001      	beq.n	80009ea <__sflush_r+0xae>
 80009e6:	2b16      	cmp	r3, #22
 80009e8:	d101      	bne.n	80009ee <__sflush_r+0xb2>
 80009ea:	602f      	str	r7, [r5, #0]
 80009ec:	e7b2      	b.n	8000954 <__sflush_r+0x18>
 80009ee:	89a3      	ldrh	r3, [r4, #12]
 80009f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009f4:	81a3      	strh	r3, [r4, #12]
 80009f6:	e7ae      	b.n	8000956 <__sflush_r+0x1a>
 80009f8:	690f      	ldr	r7, [r1, #16]
 80009fa:	2f00      	cmp	r7, #0
 80009fc:	d0aa      	beq.n	8000954 <__sflush_r+0x18>
 80009fe:	0793      	lsls	r3, r2, #30
 8000a00:	680e      	ldr	r6, [r1, #0]
 8000a02:	bf08      	it	eq
 8000a04:	694b      	ldreq	r3, [r1, #20]
 8000a06:	600f      	str	r7, [r1, #0]
 8000a08:	bf18      	it	ne
 8000a0a:	2300      	movne	r3, #0
 8000a0c:	1bf6      	subs	r6, r6, r7
 8000a0e:	608b      	str	r3, [r1, #8]
 8000a10:	2e00      	cmp	r6, #0
 8000a12:	dd9f      	ble.n	8000954 <__sflush_r+0x18>
 8000a14:	6a21      	ldr	r1, [r4, #32]
 8000a16:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8000a1a:	4633      	mov	r3, r6
 8000a1c:	463a      	mov	r2, r7
 8000a1e:	4628      	mov	r0, r5
 8000a20:	47e0      	blx	ip
 8000a22:	2800      	cmp	r0, #0
 8000a24:	dc06      	bgt.n	8000a34 <__sflush_r+0xf8>
 8000a26:	89a3      	ldrh	r3, [r4, #12]
 8000a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a2c:	81a3      	strh	r3, [r4, #12]
 8000a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a32:	e790      	b.n	8000956 <__sflush_r+0x1a>
 8000a34:	4407      	add	r7, r0
 8000a36:	1a36      	subs	r6, r6, r0
 8000a38:	e7ea      	b.n	8000a10 <__sflush_r+0xd4>
 8000a3a:	bf00      	nop
 8000a3c:	20400001 	.word	0x20400001

08000a40 <_fflush_r>:
 8000a40:	b538      	push	{r3, r4, r5, lr}
 8000a42:	690b      	ldr	r3, [r1, #16]
 8000a44:	4605      	mov	r5, r0
 8000a46:	460c      	mov	r4, r1
 8000a48:	b913      	cbnz	r3, 8000a50 <_fflush_r+0x10>
 8000a4a:	2500      	movs	r5, #0
 8000a4c:	4628      	mov	r0, r5
 8000a4e:	bd38      	pop	{r3, r4, r5, pc}
 8000a50:	b118      	cbz	r0, 8000a5a <_fflush_r+0x1a>
 8000a52:	6983      	ldr	r3, [r0, #24]
 8000a54:	b90b      	cbnz	r3, 8000a5a <_fflush_r+0x1a>
 8000a56:	f000 f887 	bl	8000b68 <__sinit>
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <_fflush_r+0x6c>)
 8000a5c:	429c      	cmp	r4, r3
 8000a5e:	d11b      	bne.n	8000a98 <_fflush_r+0x58>
 8000a60:	686c      	ldr	r4, [r5, #4]
 8000a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d0ef      	beq.n	8000a4a <_fflush_r+0xa>
 8000a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000a6c:	07d0      	lsls	r0, r2, #31
 8000a6e:	d404      	bmi.n	8000a7a <_fflush_r+0x3a>
 8000a70:	0599      	lsls	r1, r3, #22
 8000a72:	d402      	bmi.n	8000a7a <_fflush_r+0x3a>
 8000a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a76:	f000 f915 	bl	8000ca4 <__retarget_lock_acquire_recursive>
 8000a7a:	4628      	mov	r0, r5
 8000a7c:	4621      	mov	r1, r4
 8000a7e:	f7ff ff5d 	bl	800093c <__sflush_r>
 8000a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a84:	07da      	lsls	r2, r3, #31
 8000a86:	4605      	mov	r5, r0
 8000a88:	d4e0      	bmi.n	8000a4c <_fflush_r+0xc>
 8000a8a:	89a3      	ldrh	r3, [r4, #12]
 8000a8c:	059b      	lsls	r3, r3, #22
 8000a8e:	d4dd      	bmi.n	8000a4c <_fflush_r+0xc>
 8000a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a92:	f000 f908 	bl	8000ca6 <__retarget_lock_release_recursive>
 8000a96:	e7d9      	b.n	8000a4c <_fflush_r+0xc>
 8000a98:	4b05      	ldr	r3, [pc, #20]	; (8000ab0 <_fflush_r+0x70>)
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	d101      	bne.n	8000aa2 <_fflush_r+0x62>
 8000a9e:	68ac      	ldr	r4, [r5, #8]
 8000aa0:	e7df      	b.n	8000a62 <_fflush_r+0x22>
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <_fflush_r+0x74>)
 8000aa4:	429c      	cmp	r4, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	68ec      	ldreq	r4, [r5, #12]
 8000aaa:	e7da      	b.n	8000a62 <_fflush_r+0x22>
 8000aac:	08001168 	.word	0x08001168
 8000ab0:	08001188 	.word	0x08001188
 8000ab4:	08001148 	.word	0x08001148

08000ab8 <std>:
 8000ab8:	2300      	movs	r3, #0
 8000aba:	b510      	push	{r4, lr}
 8000abc:	4604      	mov	r4, r0
 8000abe:	e9c0 3300 	strd	r3, r3, [r0]
 8000ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000ac6:	6083      	str	r3, [r0, #8]
 8000ac8:	8181      	strh	r1, [r0, #12]
 8000aca:	6643      	str	r3, [r0, #100]	; 0x64
 8000acc:	81c2      	strh	r2, [r0, #14]
 8000ace:	6183      	str	r3, [r0, #24]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	2208      	movs	r2, #8
 8000ad4:	305c      	adds	r0, #92	; 0x5c
 8000ad6:	f7ff fdf3 	bl	80006c0 <memset>
 8000ada:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <std+0x38>)
 8000adc:	6263      	str	r3, [r4, #36]	; 0x24
 8000ade:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <std+0x3c>)
 8000ae0:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <std+0x40>)
 8000ae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <std+0x44>)
 8000ae8:	6224      	str	r4, [r4, #32]
 8000aea:	6323      	str	r3, [r4, #48]	; 0x30
 8000aec:	bd10      	pop	{r4, pc}
 8000aee:	bf00      	nop
 8000af0:	08000f51 	.word	0x08000f51
 8000af4:	08000f73 	.word	0x08000f73
 8000af8:	08000fab 	.word	0x08000fab
 8000afc:	08000fcf 	.word	0x08000fcf

08000b00 <_cleanup_r>:
 8000b00:	4901      	ldr	r1, [pc, #4]	; (8000b08 <_cleanup_r+0x8>)
 8000b02:	f000 b8af 	b.w	8000c64 <_fwalk_reent>
 8000b06:	bf00      	nop
 8000b08:	08000a41 	.word	0x08000a41

08000b0c <__sfmoreglue>:
 8000b0c:	b570      	push	{r4, r5, r6, lr}
 8000b0e:	2268      	movs	r2, #104	; 0x68
 8000b10:	1e4d      	subs	r5, r1, #1
 8000b12:	4355      	muls	r5, r2
 8000b14:	460e      	mov	r6, r1
 8000b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000b1a:	f000 f995 	bl	8000e48 <_malloc_r>
 8000b1e:	4604      	mov	r4, r0
 8000b20:	b140      	cbz	r0, 8000b34 <__sfmoreglue+0x28>
 8000b22:	2100      	movs	r1, #0
 8000b24:	e9c0 1600 	strd	r1, r6, [r0]
 8000b28:	300c      	adds	r0, #12
 8000b2a:	60a0      	str	r0, [r4, #8]
 8000b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000b30:	f7ff fdc6 	bl	80006c0 <memset>
 8000b34:	4620      	mov	r0, r4
 8000b36:	bd70      	pop	{r4, r5, r6, pc}

08000b38 <__sfp_lock_acquire>:
 8000b38:	4801      	ldr	r0, [pc, #4]	; (8000b40 <__sfp_lock_acquire+0x8>)
 8000b3a:	f000 b8b3 	b.w	8000ca4 <__retarget_lock_acquire_recursive>
 8000b3e:	bf00      	nop
 8000b40:	200000a1 	.word	0x200000a1

08000b44 <__sfp_lock_release>:
 8000b44:	4801      	ldr	r0, [pc, #4]	; (8000b4c <__sfp_lock_release+0x8>)
 8000b46:	f000 b8ae 	b.w	8000ca6 <__retarget_lock_release_recursive>
 8000b4a:	bf00      	nop
 8000b4c:	200000a1 	.word	0x200000a1

08000b50 <__sinit_lock_acquire>:
 8000b50:	4801      	ldr	r0, [pc, #4]	; (8000b58 <__sinit_lock_acquire+0x8>)
 8000b52:	f000 b8a7 	b.w	8000ca4 <__retarget_lock_acquire_recursive>
 8000b56:	bf00      	nop
 8000b58:	200000a2 	.word	0x200000a2

08000b5c <__sinit_lock_release>:
 8000b5c:	4801      	ldr	r0, [pc, #4]	; (8000b64 <__sinit_lock_release+0x8>)
 8000b5e:	f000 b8a2 	b.w	8000ca6 <__retarget_lock_release_recursive>
 8000b62:	bf00      	nop
 8000b64:	200000a2 	.word	0x200000a2

08000b68 <__sinit>:
 8000b68:	b510      	push	{r4, lr}
 8000b6a:	4604      	mov	r4, r0
 8000b6c:	f7ff fff0 	bl	8000b50 <__sinit_lock_acquire>
 8000b70:	69a3      	ldr	r3, [r4, #24]
 8000b72:	b11b      	cbz	r3, 8000b7c <__sinit+0x14>
 8000b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b78:	f7ff bff0 	b.w	8000b5c <__sinit_lock_release>
 8000b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000b80:	6523      	str	r3, [r4, #80]	; 0x50
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <__sinit+0x68>)
 8000b84:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <__sinit+0x6c>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	bf04      	itt	eq
 8000b8e:	2301      	moveq	r3, #1
 8000b90:	61a3      	streq	r3, [r4, #24]
 8000b92:	4620      	mov	r0, r4
 8000b94:	f000 f820 	bl	8000bd8 <__sfp>
 8000b98:	6060      	str	r0, [r4, #4]
 8000b9a:	4620      	mov	r0, r4
 8000b9c:	f000 f81c 	bl	8000bd8 <__sfp>
 8000ba0:	60a0      	str	r0, [r4, #8]
 8000ba2:	4620      	mov	r0, r4
 8000ba4:	f000 f818 	bl	8000bd8 <__sfp>
 8000ba8:	2200      	movs	r2, #0
 8000baa:	60e0      	str	r0, [r4, #12]
 8000bac:	2104      	movs	r1, #4
 8000bae:	6860      	ldr	r0, [r4, #4]
 8000bb0:	f7ff ff82 	bl	8000ab8 <std>
 8000bb4:	68a0      	ldr	r0, [r4, #8]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	2109      	movs	r1, #9
 8000bba:	f7ff ff7d 	bl	8000ab8 <std>
 8000bbe:	68e0      	ldr	r0, [r4, #12]
 8000bc0:	2202      	movs	r2, #2
 8000bc2:	2112      	movs	r1, #18
 8000bc4:	f7ff ff78 	bl	8000ab8 <std>
 8000bc8:	2301      	movs	r3, #1
 8000bca:	61a3      	str	r3, [r4, #24]
 8000bcc:	e7d2      	b.n	8000b74 <__sinit+0xc>
 8000bce:	bf00      	nop
 8000bd0:	08001144 	.word	0x08001144
 8000bd4:	08000b01 	.word	0x08000b01

08000bd8 <__sfp>:
 8000bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bda:	4607      	mov	r7, r0
 8000bdc:	f7ff ffac 	bl	8000b38 <__sfp_lock_acquire>
 8000be0:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <__sfp+0x84>)
 8000be2:	681e      	ldr	r6, [r3, #0]
 8000be4:	69b3      	ldr	r3, [r6, #24]
 8000be6:	b913      	cbnz	r3, 8000bee <__sfp+0x16>
 8000be8:	4630      	mov	r0, r6
 8000bea:	f7ff ffbd 	bl	8000b68 <__sinit>
 8000bee:	3648      	adds	r6, #72	; 0x48
 8000bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	d503      	bpl.n	8000c00 <__sfp+0x28>
 8000bf8:	6833      	ldr	r3, [r6, #0]
 8000bfa:	b30b      	cbz	r3, 8000c40 <__sfp+0x68>
 8000bfc:	6836      	ldr	r6, [r6, #0]
 8000bfe:	e7f7      	b.n	8000bf0 <__sfp+0x18>
 8000c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000c04:	b9d5      	cbnz	r5, 8000c3c <__sfp+0x64>
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <__sfp+0x88>)
 8000c08:	60e3      	str	r3, [r4, #12]
 8000c0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8000c10:	f000 f847 	bl	8000ca2 <__retarget_lock_init_recursive>
 8000c14:	f7ff ff96 	bl	8000b44 <__sfp_lock_release>
 8000c18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000c1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000c20:	6025      	str	r5, [r4, #0]
 8000c22:	61a5      	str	r5, [r4, #24]
 8000c24:	2208      	movs	r2, #8
 8000c26:	4629      	mov	r1, r5
 8000c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000c2c:	f7ff fd48 	bl	80006c0 <memset>
 8000c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000c38:	4620      	mov	r0, r4
 8000c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3c:	3468      	adds	r4, #104	; 0x68
 8000c3e:	e7d9      	b.n	8000bf4 <__sfp+0x1c>
 8000c40:	2104      	movs	r1, #4
 8000c42:	4638      	mov	r0, r7
 8000c44:	f7ff ff62 	bl	8000b0c <__sfmoreglue>
 8000c48:	4604      	mov	r4, r0
 8000c4a:	6030      	str	r0, [r6, #0]
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d1d5      	bne.n	8000bfc <__sfp+0x24>
 8000c50:	f7ff ff78 	bl	8000b44 <__sfp_lock_release>
 8000c54:	230c      	movs	r3, #12
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	e7ee      	b.n	8000c38 <__sfp+0x60>
 8000c5a:	bf00      	nop
 8000c5c:	08001144 	.word	0x08001144
 8000c60:	ffff0001 	.word	0xffff0001

08000c64 <_fwalk_reent>:
 8000c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c68:	4606      	mov	r6, r0
 8000c6a:	4688      	mov	r8, r1
 8000c6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000c70:	2700      	movs	r7, #0
 8000c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000c76:	f1b9 0901 	subs.w	r9, r9, #1
 8000c7a:	d505      	bpl.n	8000c88 <_fwalk_reent+0x24>
 8000c7c:	6824      	ldr	r4, [r4, #0]
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	d1f7      	bne.n	8000c72 <_fwalk_reent+0xe>
 8000c82:	4638      	mov	r0, r7
 8000c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c88:	89ab      	ldrh	r3, [r5, #12]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d907      	bls.n	8000c9e <_fwalk_reent+0x3a>
 8000c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000c92:	3301      	adds	r3, #1
 8000c94:	d003      	beq.n	8000c9e <_fwalk_reent+0x3a>
 8000c96:	4629      	mov	r1, r5
 8000c98:	4630      	mov	r0, r6
 8000c9a:	47c0      	blx	r8
 8000c9c:	4307      	orrs	r7, r0
 8000c9e:	3568      	adds	r5, #104	; 0x68
 8000ca0:	e7e9      	b.n	8000c76 <_fwalk_reent+0x12>

08000ca2 <__retarget_lock_init_recursive>:
 8000ca2:	4770      	bx	lr

08000ca4 <__retarget_lock_acquire_recursive>:
 8000ca4:	4770      	bx	lr

08000ca6 <__retarget_lock_release_recursive>:
 8000ca6:	4770      	bx	lr

08000ca8 <__swhatbuf_r>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	460e      	mov	r6, r1
 8000cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cb0:	2900      	cmp	r1, #0
 8000cb2:	b096      	sub	sp, #88	; 0x58
 8000cb4:	4614      	mov	r4, r2
 8000cb6:	461d      	mov	r5, r3
 8000cb8:	da08      	bge.n	8000ccc <__swhatbuf_r+0x24>
 8000cba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	602a      	str	r2, [r5, #0]
 8000cc2:	061a      	lsls	r2, r3, #24
 8000cc4:	d410      	bmi.n	8000ce8 <__swhatbuf_r+0x40>
 8000cc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cca:	e00e      	b.n	8000cea <__swhatbuf_r+0x42>
 8000ccc:	466a      	mov	r2, sp
 8000cce:	f000 f9a5 	bl	800101c <_fstat_r>
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	dbf1      	blt.n	8000cba <__swhatbuf_r+0x12>
 8000cd6:	9a01      	ldr	r2, [sp, #4]
 8000cd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000cdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000ce0:	425a      	negs	r2, r3
 8000ce2:	415a      	adcs	r2, r3
 8000ce4:	602a      	str	r2, [r5, #0]
 8000ce6:	e7ee      	b.n	8000cc6 <__swhatbuf_r+0x1e>
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	2000      	movs	r0, #0
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	b016      	add	sp, #88	; 0x58
 8000cf0:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cf4 <__smakebuf_r>:
 8000cf4:	898b      	ldrh	r3, [r1, #12]
 8000cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000cf8:	079d      	lsls	r5, r3, #30
 8000cfa:	4606      	mov	r6, r0
 8000cfc:	460c      	mov	r4, r1
 8000cfe:	d507      	bpl.n	8000d10 <__smakebuf_r+0x1c>
 8000d00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000d04:	6023      	str	r3, [r4, #0]
 8000d06:	6123      	str	r3, [r4, #16]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	6163      	str	r3, [r4, #20]
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd70      	pop	{r4, r5, r6, pc}
 8000d10:	ab01      	add	r3, sp, #4
 8000d12:	466a      	mov	r2, sp
 8000d14:	f7ff ffc8 	bl	8000ca8 <__swhatbuf_r>
 8000d18:	9900      	ldr	r1, [sp, #0]
 8000d1a:	4605      	mov	r5, r0
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	f000 f893 	bl	8000e48 <_malloc_r>
 8000d22:	b948      	cbnz	r0, 8000d38 <__smakebuf_r+0x44>
 8000d24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d28:	059a      	lsls	r2, r3, #22
 8000d2a:	d4ef      	bmi.n	8000d0c <__smakebuf_r+0x18>
 8000d2c:	f023 0303 	bic.w	r3, r3, #3
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	81a3      	strh	r3, [r4, #12]
 8000d36:	e7e3      	b.n	8000d00 <__smakebuf_r+0xc>
 8000d38:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <__smakebuf_r+0x7c>)
 8000d3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d3c:	89a3      	ldrh	r3, [r4, #12]
 8000d3e:	6020      	str	r0, [r4, #0]
 8000d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d44:	81a3      	strh	r3, [r4, #12]
 8000d46:	9b00      	ldr	r3, [sp, #0]
 8000d48:	6163      	str	r3, [r4, #20]
 8000d4a:	9b01      	ldr	r3, [sp, #4]
 8000d4c:	6120      	str	r0, [r4, #16]
 8000d4e:	b15b      	cbz	r3, 8000d68 <__smakebuf_r+0x74>
 8000d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d54:	4630      	mov	r0, r6
 8000d56:	f000 f973 	bl	8001040 <_isatty_r>
 8000d5a:	b128      	cbz	r0, 8000d68 <__smakebuf_r+0x74>
 8000d5c:	89a3      	ldrh	r3, [r4, #12]
 8000d5e:	f023 0303 	bic.w	r3, r3, #3
 8000d62:	f043 0301 	orr.w	r3, r3, #1
 8000d66:	81a3      	strh	r3, [r4, #12]
 8000d68:	89a0      	ldrh	r0, [r4, #12]
 8000d6a:	4305      	orrs	r5, r0
 8000d6c:	81a5      	strh	r5, [r4, #12]
 8000d6e:	e7cd      	b.n	8000d0c <__smakebuf_r+0x18>
 8000d70:	08000b01 	.word	0x08000b01

08000d74 <_free_r>:
 8000d74:	b538      	push	{r3, r4, r5, lr}
 8000d76:	4605      	mov	r5, r0
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d041      	beq.n	8000e00 <_free_r+0x8c>
 8000d7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d80:	1f0c      	subs	r4, r1, #4
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bfb8      	it	lt
 8000d86:	18e4      	addlt	r4, r4, r3
 8000d88:	f000 f97c 	bl	8001084 <__malloc_lock>
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <_free_r+0x90>)
 8000d8e:	6813      	ldr	r3, [r2, #0]
 8000d90:	b933      	cbnz	r3, 8000da0 <_free_r+0x2c>
 8000d92:	6063      	str	r3, [r4, #4]
 8000d94:	6014      	str	r4, [r2, #0]
 8000d96:	4628      	mov	r0, r5
 8000d98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d9c:	f000 b978 	b.w	8001090 <__malloc_unlock>
 8000da0:	42a3      	cmp	r3, r4
 8000da2:	d908      	bls.n	8000db6 <_free_r+0x42>
 8000da4:	6820      	ldr	r0, [r4, #0]
 8000da6:	1821      	adds	r1, r4, r0
 8000da8:	428b      	cmp	r3, r1
 8000daa:	bf01      	itttt	eq
 8000dac:	6819      	ldreq	r1, [r3, #0]
 8000dae:	685b      	ldreq	r3, [r3, #4]
 8000db0:	1809      	addeq	r1, r1, r0
 8000db2:	6021      	streq	r1, [r4, #0]
 8000db4:	e7ed      	b.n	8000d92 <_free_r+0x1e>
 8000db6:	461a      	mov	r2, r3
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	b10b      	cbz	r3, 8000dc0 <_free_r+0x4c>
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d9fa      	bls.n	8000db6 <_free_r+0x42>
 8000dc0:	6811      	ldr	r1, [r2, #0]
 8000dc2:	1850      	adds	r0, r2, r1
 8000dc4:	42a0      	cmp	r0, r4
 8000dc6:	d10b      	bne.n	8000de0 <_free_r+0x6c>
 8000dc8:	6820      	ldr	r0, [r4, #0]
 8000dca:	4401      	add	r1, r0
 8000dcc:	1850      	adds	r0, r2, r1
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	6011      	str	r1, [r2, #0]
 8000dd2:	d1e0      	bne.n	8000d96 <_free_r+0x22>
 8000dd4:	6818      	ldr	r0, [r3, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	6053      	str	r3, [r2, #4]
 8000dda:	4401      	add	r1, r0
 8000ddc:	6011      	str	r1, [r2, #0]
 8000dde:	e7da      	b.n	8000d96 <_free_r+0x22>
 8000de0:	d902      	bls.n	8000de8 <_free_r+0x74>
 8000de2:	230c      	movs	r3, #12
 8000de4:	602b      	str	r3, [r5, #0]
 8000de6:	e7d6      	b.n	8000d96 <_free_r+0x22>
 8000de8:	6820      	ldr	r0, [r4, #0]
 8000dea:	1821      	adds	r1, r4, r0
 8000dec:	428b      	cmp	r3, r1
 8000dee:	bf04      	itt	eq
 8000df0:	6819      	ldreq	r1, [r3, #0]
 8000df2:	685b      	ldreq	r3, [r3, #4]
 8000df4:	6063      	str	r3, [r4, #4]
 8000df6:	bf04      	itt	eq
 8000df8:	1809      	addeq	r1, r1, r0
 8000dfa:	6021      	streq	r1, [r4, #0]
 8000dfc:	6054      	str	r4, [r2, #4]
 8000dfe:	e7ca      	b.n	8000d96 <_free_r+0x22>
 8000e00:	bd38      	pop	{r3, r4, r5, pc}
 8000e02:	bf00      	nop
 8000e04:	200000a4 	.word	0x200000a4

08000e08 <sbrk_aligned>:
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	4e0e      	ldr	r6, [pc, #56]	; (8000e44 <sbrk_aligned+0x3c>)
 8000e0c:	460c      	mov	r4, r1
 8000e0e:	6831      	ldr	r1, [r6, #0]
 8000e10:	4605      	mov	r5, r0
 8000e12:	b911      	cbnz	r1, 8000e1a <sbrk_aligned+0x12>
 8000e14:	f000 f88c 	bl	8000f30 <_sbrk_r>
 8000e18:	6030      	str	r0, [r6, #0]
 8000e1a:	4621      	mov	r1, r4
 8000e1c:	4628      	mov	r0, r5
 8000e1e:	f000 f887 	bl	8000f30 <_sbrk_r>
 8000e22:	1c43      	adds	r3, r0, #1
 8000e24:	d00a      	beq.n	8000e3c <sbrk_aligned+0x34>
 8000e26:	1cc4      	adds	r4, r0, #3
 8000e28:	f024 0403 	bic.w	r4, r4, #3
 8000e2c:	42a0      	cmp	r0, r4
 8000e2e:	d007      	beq.n	8000e40 <sbrk_aligned+0x38>
 8000e30:	1a21      	subs	r1, r4, r0
 8000e32:	4628      	mov	r0, r5
 8000e34:	f000 f87c 	bl	8000f30 <_sbrk_r>
 8000e38:	3001      	adds	r0, #1
 8000e3a:	d101      	bne.n	8000e40 <sbrk_aligned+0x38>
 8000e3c:	f04f 34ff 	mov.w	r4, #4294967295
 8000e40:	4620      	mov	r0, r4
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
 8000e44:	200000a8 	.word	0x200000a8

08000e48 <_malloc_r>:
 8000e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e4c:	1ccd      	adds	r5, r1, #3
 8000e4e:	f025 0503 	bic.w	r5, r5, #3
 8000e52:	3508      	adds	r5, #8
 8000e54:	2d0c      	cmp	r5, #12
 8000e56:	bf38      	it	cc
 8000e58:	250c      	movcc	r5, #12
 8000e5a:	2d00      	cmp	r5, #0
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	db01      	blt.n	8000e64 <_malloc_r+0x1c>
 8000e60:	42a9      	cmp	r1, r5
 8000e62:	d905      	bls.n	8000e70 <_malloc_r+0x28>
 8000e64:	230c      	movs	r3, #12
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	2600      	movs	r6, #0
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e70:	4e2e      	ldr	r6, [pc, #184]	; (8000f2c <_malloc_r+0xe4>)
 8000e72:	f000 f907 	bl	8001084 <__malloc_lock>
 8000e76:	6833      	ldr	r3, [r6, #0]
 8000e78:	461c      	mov	r4, r3
 8000e7a:	bb34      	cbnz	r4, 8000eca <_malloc_r+0x82>
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	4638      	mov	r0, r7
 8000e80:	f7ff ffc2 	bl	8000e08 <sbrk_aligned>
 8000e84:	1c43      	adds	r3, r0, #1
 8000e86:	4604      	mov	r4, r0
 8000e88:	d14d      	bne.n	8000f26 <_malloc_r+0xde>
 8000e8a:	6834      	ldr	r4, [r6, #0]
 8000e8c:	4626      	mov	r6, r4
 8000e8e:	2e00      	cmp	r6, #0
 8000e90:	d140      	bne.n	8000f14 <_malloc_r+0xcc>
 8000e92:	6823      	ldr	r3, [r4, #0]
 8000e94:	4631      	mov	r1, r6
 8000e96:	4638      	mov	r0, r7
 8000e98:	eb04 0803 	add.w	r8, r4, r3
 8000e9c:	f000 f848 	bl	8000f30 <_sbrk_r>
 8000ea0:	4580      	cmp	r8, r0
 8000ea2:	d13a      	bne.n	8000f1a <_malloc_r+0xd2>
 8000ea4:	6821      	ldr	r1, [r4, #0]
 8000ea6:	3503      	adds	r5, #3
 8000ea8:	1a6d      	subs	r5, r5, r1
 8000eaa:	f025 0503 	bic.w	r5, r5, #3
 8000eae:	3508      	adds	r5, #8
 8000eb0:	2d0c      	cmp	r5, #12
 8000eb2:	bf38      	it	cc
 8000eb4:	250c      	movcc	r5, #12
 8000eb6:	4629      	mov	r1, r5
 8000eb8:	4638      	mov	r0, r7
 8000eba:	f7ff ffa5 	bl	8000e08 <sbrk_aligned>
 8000ebe:	3001      	adds	r0, #1
 8000ec0:	d02b      	beq.n	8000f1a <_malloc_r+0xd2>
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	442b      	add	r3, r5
 8000ec6:	6023      	str	r3, [r4, #0]
 8000ec8:	e00e      	b.n	8000ee8 <_malloc_r+0xa0>
 8000eca:	6822      	ldr	r2, [r4, #0]
 8000ecc:	1b52      	subs	r2, r2, r5
 8000ece:	d41e      	bmi.n	8000f0e <_malloc_r+0xc6>
 8000ed0:	2a0b      	cmp	r2, #11
 8000ed2:	d916      	bls.n	8000f02 <_malloc_r+0xba>
 8000ed4:	1961      	adds	r1, r4, r5
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	6025      	str	r5, [r4, #0]
 8000eda:	bf18      	it	ne
 8000edc:	6059      	strne	r1, [r3, #4]
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	bf08      	it	eq
 8000ee2:	6031      	streq	r1, [r6, #0]
 8000ee4:	5162      	str	r2, [r4, r5]
 8000ee6:	604b      	str	r3, [r1, #4]
 8000ee8:	4638      	mov	r0, r7
 8000eea:	f104 060b 	add.w	r6, r4, #11
 8000eee:	f000 f8cf 	bl	8001090 <__malloc_unlock>
 8000ef2:	f026 0607 	bic.w	r6, r6, #7
 8000ef6:	1d23      	adds	r3, r4, #4
 8000ef8:	1af2      	subs	r2, r6, r3
 8000efa:	d0b6      	beq.n	8000e6a <_malloc_r+0x22>
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	50a3      	str	r3, [r4, r2]
 8000f00:	e7b3      	b.n	8000e6a <_malloc_r+0x22>
 8000f02:	6862      	ldr	r2, [r4, #4]
 8000f04:	42a3      	cmp	r3, r4
 8000f06:	bf0c      	ite	eq
 8000f08:	6032      	streq	r2, [r6, #0]
 8000f0a:	605a      	strne	r2, [r3, #4]
 8000f0c:	e7ec      	b.n	8000ee8 <_malloc_r+0xa0>
 8000f0e:	4623      	mov	r3, r4
 8000f10:	6864      	ldr	r4, [r4, #4]
 8000f12:	e7b2      	b.n	8000e7a <_malloc_r+0x32>
 8000f14:	4634      	mov	r4, r6
 8000f16:	6876      	ldr	r6, [r6, #4]
 8000f18:	e7b9      	b.n	8000e8e <_malloc_r+0x46>
 8000f1a:	230c      	movs	r3, #12
 8000f1c:	603b      	str	r3, [r7, #0]
 8000f1e:	4638      	mov	r0, r7
 8000f20:	f000 f8b6 	bl	8001090 <__malloc_unlock>
 8000f24:	e7a1      	b.n	8000e6a <_malloc_r+0x22>
 8000f26:	6025      	str	r5, [r4, #0]
 8000f28:	e7de      	b.n	8000ee8 <_malloc_r+0xa0>
 8000f2a:	bf00      	nop
 8000f2c:	200000a4 	.word	0x200000a4

08000f30 <_sbrk_r>:
 8000f30:	b538      	push	{r3, r4, r5, lr}
 8000f32:	4d06      	ldr	r5, [pc, #24]	; (8000f4c <_sbrk_r+0x1c>)
 8000f34:	2300      	movs	r3, #0
 8000f36:	4604      	mov	r4, r0
 8000f38:	4608      	mov	r0, r1
 8000f3a:	602b      	str	r3, [r5, #0]
 8000f3c:	f7ff fb36 	bl	80005ac <_sbrk>
 8000f40:	1c43      	adds	r3, r0, #1
 8000f42:	d102      	bne.n	8000f4a <_sbrk_r+0x1a>
 8000f44:	682b      	ldr	r3, [r5, #0]
 8000f46:	b103      	cbz	r3, 8000f4a <_sbrk_r+0x1a>
 8000f48:	6023      	str	r3, [r4, #0]
 8000f4a:	bd38      	pop	{r3, r4, r5, pc}
 8000f4c:	200000ac 	.word	0x200000ac

08000f50 <__sread>:
 8000f50:	b510      	push	{r4, lr}
 8000f52:	460c      	mov	r4, r1
 8000f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f58:	f000 f8a0 	bl	800109c <_read_r>
 8000f5c:	2800      	cmp	r0, #0
 8000f5e:	bfab      	itete	ge
 8000f60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000f62:	89a3      	ldrhlt	r3, [r4, #12]
 8000f64:	181b      	addge	r3, r3, r0
 8000f66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000f6a:	bfac      	ite	ge
 8000f6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000f6e:	81a3      	strhlt	r3, [r4, #12]
 8000f70:	bd10      	pop	{r4, pc}

08000f72 <__swrite>:
 8000f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f76:	461f      	mov	r7, r3
 8000f78:	898b      	ldrh	r3, [r1, #12]
 8000f7a:	05db      	lsls	r3, r3, #23
 8000f7c:	4605      	mov	r5, r0
 8000f7e:	460c      	mov	r4, r1
 8000f80:	4616      	mov	r6, r2
 8000f82:	d505      	bpl.n	8000f90 <__swrite+0x1e>
 8000f84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f000 f868 	bl	8001060 <_lseek_r>
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000f9a:	81a3      	strh	r3, [r4, #12]
 8000f9c:	4632      	mov	r2, r6
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	4628      	mov	r0, r5
 8000fa2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa6:	f000 b817 	b.w	8000fd8 <_write_r>

08000faa <__sseek>:
 8000faa:	b510      	push	{r4, lr}
 8000fac:	460c      	mov	r4, r1
 8000fae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fb2:	f000 f855 	bl	8001060 <_lseek_r>
 8000fb6:	1c43      	adds	r3, r0, #1
 8000fb8:	89a3      	ldrh	r3, [r4, #12]
 8000fba:	bf15      	itete	ne
 8000fbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000fbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000fc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000fc6:	81a3      	strheq	r3, [r4, #12]
 8000fc8:	bf18      	it	ne
 8000fca:	81a3      	strhne	r3, [r4, #12]
 8000fcc:	bd10      	pop	{r4, pc}

08000fce <__sclose>:
 8000fce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fd2:	f000 b813 	b.w	8000ffc <_close_r>
	...

08000fd8 <_write_r>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d07      	ldr	r5, [pc, #28]	; (8000ff8 <_write_r+0x20>)
 8000fdc:	4604      	mov	r4, r0
 8000fde:	4608      	mov	r0, r1
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	602a      	str	r2, [r5, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	f7ff fa93 	bl	8000512 <_write>
 8000fec:	1c43      	adds	r3, r0, #1
 8000fee:	d102      	bne.n	8000ff6 <_write_r+0x1e>
 8000ff0:	682b      	ldr	r3, [r5, #0]
 8000ff2:	b103      	cbz	r3, 8000ff6 <_write_r+0x1e>
 8000ff4:	6023      	str	r3, [r4, #0]
 8000ff6:	bd38      	pop	{r3, r4, r5, pc}
 8000ff8:	200000ac 	.word	0x200000ac

08000ffc <_close_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	; (8001018 <_close_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff fa9f 	bl	800054a <_close>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_close_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_close_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	200000ac 	.word	0x200000ac

0800101c <_fstat_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d07      	ldr	r5, [pc, #28]	; (800103c <_fstat_r+0x20>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	602b      	str	r3, [r5, #0]
 800102a:	f7ff fa99 	bl	8000560 <_fstat>
 800102e:	1c43      	adds	r3, r0, #1
 8001030:	d102      	bne.n	8001038 <_fstat_r+0x1c>
 8001032:	682b      	ldr	r3, [r5, #0]
 8001034:	b103      	cbz	r3, 8001038 <_fstat_r+0x1c>
 8001036:	6023      	str	r3, [r4, #0]
 8001038:	bd38      	pop	{r3, r4, r5, pc}
 800103a:	bf00      	nop
 800103c:	200000ac 	.word	0x200000ac

08001040 <_isatty_r>:
 8001040:	b538      	push	{r3, r4, r5, lr}
 8001042:	4d06      	ldr	r5, [pc, #24]	; (800105c <_isatty_r+0x1c>)
 8001044:	2300      	movs	r3, #0
 8001046:	4604      	mov	r4, r0
 8001048:	4608      	mov	r0, r1
 800104a:	602b      	str	r3, [r5, #0]
 800104c:	f7ff fa97 	bl	800057e <_isatty>
 8001050:	1c43      	adds	r3, r0, #1
 8001052:	d102      	bne.n	800105a <_isatty_r+0x1a>
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	b103      	cbz	r3, 800105a <_isatty_r+0x1a>
 8001058:	6023      	str	r3, [r4, #0]
 800105a:	bd38      	pop	{r3, r4, r5, pc}
 800105c:	200000ac 	.word	0x200000ac

08001060 <_lseek_r>:
 8001060:	b538      	push	{r3, r4, r5, lr}
 8001062:	4d07      	ldr	r5, [pc, #28]	; (8001080 <_lseek_r+0x20>)
 8001064:	4604      	mov	r4, r0
 8001066:	4608      	mov	r0, r1
 8001068:	4611      	mov	r1, r2
 800106a:	2200      	movs	r2, #0
 800106c:	602a      	str	r2, [r5, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	f7ff fa8f 	bl	8000592 <_lseek>
 8001074:	1c43      	adds	r3, r0, #1
 8001076:	d102      	bne.n	800107e <_lseek_r+0x1e>
 8001078:	682b      	ldr	r3, [r5, #0]
 800107a:	b103      	cbz	r3, 800107e <_lseek_r+0x1e>
 800107c:	6023      	str	r3, [r4, #0]
 800107e:	bd38      	pop	{r3, r4, r5, pc}
 8001080:	200000ac 	.word	0x200000ac

08001084 <__malloc_lock>:
 8001084:	4801      	ldr	r0, [pc, #4]	; (800108c <__malloc_lock+0x8>)
 8001086:	f7ff be0d 	b.w	8000ca4 <__retarget_lock_acquire_recursive>
 800108a:	bf00      	nop
 800108c:	200000a0 	.word	0x200000a0

08001090 <__malloc_unlock>:
 8001090:	4801      	ldr	r0, [pc, #4]	; (8001098 <__malloc_unlock+0x8>)
 8001092:	f7ff be08 	b.w	8000ca6 <__retarget_lock_release_recursive>
 8001096:	bf00      	nop
 8001098:	200000a0 	.word	0x200000a0

0800109c <_read_r>:
 800109c:	b538      	push	{r3, r4, r5, lr}
 800109e:	4d07      	ldr	r5, [pc, #28]	; (80010bc <_read_r+0x20>)
 80010a0:	4604      	mov	r4, r0
 80010a2:	4608      	mov	r0, r1
 80010a4:	4611      	mov	r1, r2
 80010a6:	2200      	movs	r2, #0
 80010a8:	602a      	str	r2, [r5, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	f7ff fa14 	bl	80004d8 <_read>
 80010b0:	1c43      	adds	r3, r0, #1
 80010b2:	d102      	bne.n	80010ba <_read_r+0x1e>
 80010b4:	682b      	ldr	r3, [r5, #0]
 80010b6:	b103      	cbz	r3, 80010ba <_read_r+0x1e>
 80010b8:	6023      	str	r3, [r4, #0]
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
 80010bc:	200000ac 	.word	0x200000ac

080010c0 <_init>:
 80010c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010c2:	bf00      	nop
 80010c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010c6:	bc08      	pop	{r3}
 80010c8:	469e      	mov	lr, r3
 80010ca:	4770      	bx	lr

080010cc <_fini>:
 80010cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ce:	bf00      	nop
 80010d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010d2:	bc08      	pop	{r3}
 80010d4:	469e      	mov	lr, r3
 80010d6:	4770      	bx	lr
